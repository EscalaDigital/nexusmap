This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-29T12:26:57.350Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
admin/class-nm-admin.php
admin/copia_admin.php
admin/js/admin.js
admin/js/entries.js
admin/NM_Ajax_Handlers.php
admin/NM_Entries.php
admin/NM_Manage_Layers.php
admin/NM_Map_Settings.php
admin/NM_Menu_Main.php
form-builder.php
nexusmap.php
nm-utils.php
public/class-nm-public.php
public/js/form.js
public/js/funcionesmaps.js
public/js/public.js

================================================================
Repository Files
================================================================

================
File: admin/class-nm-admin.php
================
<?php

require_once 'NM_Menu_Main.php';
require_once 'NM_Entries.php';
require_once 'NM_Map_Settings.php';
require_once 'NM_Manage_Layers.php';
require_once 'NM_Ajax_Handlers.php';

class NM_Admin
{
    private $loader;
    private $model;

    public function __construct($loader)
    {
        $this->loader = $loader;
        $this->model = new NM_Model();

        // Cargar funcionalidades divididas
        new NM_Menu_Main($this->loader, $this->model);
        new NM_Entries($this->loader, $this->model);
        new NM_Map_Settings($this->loader);
        new NM_Manage_Layers($this->loader);
        new NM_Ajax_Handlers($this->loader, $this->model);

        // Cargar estilos y scripts en las páginas específicas del plugin
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_admin_assets');
    }

    public function enqueue_admin_assets($hook_suffix)
    {
        // Verificar que solo se carguen en las páginas de NexusMap
        $plugin_pages = ['toplevel_page_nm', 'nexusmap_page_nm-entries', 'nexusmap_page_nm_map_settings', 'nexusmap_page_nm_manage_layers'];

        if (in_array($hook_suffix, $plugin_pages)) {
            // Cargar CSS
            wp_enqueue_style('nm-admin-css', NM_PLUGIN_URL . 'admin/css/admin.css', array(), NM_VERSION);
            wp_enqueue_style('nm-entries-css', NM_PLUGIN_URL . 'admin/css/entries.css', array(), NM_VERSION);

            // Cargar CSS y JS de Leaflet (si es necesario para la página de capas o mapa)
            wp_enqueue_style('leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), null);
            wp_enqueue_script('leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), null, true);

            // Cargar scripts específicos
            wp_enqueue_script('nm-admin-js', NM_PLUGIN_URL . 'admin/js/admin.js', array('jquery', 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable'), NM_VERSION, true);
            wp_enqueue_script('nm-entries-js', NM_PLUGIN_URL . 'admin/js/entries.js', array('jquery', 'leaflet-js'), NM_VERSION, true);
            

            // Agregar variables globales para AJAX
            wp_localize_script('nm-admin-js', 'nmAdmin', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce'    => wp_create_nonce('nm_admin_nonce')
            ));
        }
    }
}

================
File: admin/copia_admin.php
================
<?php

class NM_Admin
{

    private $loader;
    private $model;

    public function __construct($loader)
    {
        $this->loader = $loader;
        $this->model = new NM_Model();

        $this->loader->add_action('admin_menu', $this, 'add_plugin_admin_menu');
        $this->loader->add_action('admin_init', $this, 'register_map_settings'); // Agregar el hook para registrar las opciones del mapa
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_admin_assets');
        $this->loader->add_action('wp_ajax_nm_save_form', $this, 'save_form');
        $this->loader->add_action('wp_ajax_nm_get_field_template', $this, 'get_field_template');
        $this->loader->add_action('wp_ajax_nm_get_entries', $this, 'get_entries');
        $this->loader->add_action('wp_ajax_nm_update_entry_status', $this, 'update_entry_status');

        // Acciones para capas base
        $this->loader->add_action('admin_post_nm_add_base_layer_action', $this, 'handle_add_base_layer');
        $this->loader->add_action('admin_post_nm_delete_base_layer_action', $this, 'handle_delete_base_layer');

        // Acciones para capas overlay
        $this->loader->add_action('admin_post_nm_add_overlay_layer_action', $this, 'handle_add_overlay_layer');
        $this->loader->add_action('admin_post_nm_delete_overlay_layer_action', $this, 'handle_delete_overlay_layer');
    }

    public function add_plugin_admin_menu()
    {
        add_menu_page(
            'NexusMap',
            'NexusMap',
            'manage_options',
            'nm',
            array($this, 'display_plugin_setup_page'),
            'dashicons-location-alt',
            25
        );

        add_submenu_page(
            'nm',
            'Form Entries',
            'Entries',
            'manage_options',
            'nm-entries',
            array($this, 'display_entries_page')
        );

        // Agregar el nuevo submenú para las configuraciones del mapa
        add_submenu_page(
            'nm',
            'Map Settings',
            'Map Settings',
            'manage_options',
            'nm_map_settings',
            array($this, 'display_map_settings_page')
        );

        // Nuevo submenú para "Manage Layers"
        add_submenu_page(
            'nm',
            'Manage Layers',
            'Manage Layers',
            'manage_options',
            'nm_manage_layers',
            array($this, 'display_manage_layers_page')
        );
    }

    public function display_plugin_setup_page()
    {
        $form_data = $this->model->get_form();
        include_once 'views/form-builder.php';
    }

    public function display_entries_page()
    {
        $entries = $this->model->get_entries();
        include_once 'views/entries-list.php';
    }

    public function display_map_settings_page()
    {
        include_once 'views/map-settings.php';
    }

    public function display_manage_layers_page()
    {
        include_once 'views/manage-layers.php';
    }

    // Función para manejar la adición de capas base
    public function handle_add_base_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_base_layer', 'nm_nonce');

        // Procesar los datos del formulario
        $layer_name = sanitize_text_field($_POST['layer_name']);
        $layer_url = nm_sanitize_tile_url($_POST['layer_url']);
        $layer_attribution = sanitize_textarea_field($_POST['layer_attribution']);

        $base_layers = get_option('nm_base_layers', array());

        $base_layers[] = array(
            'name' => $layer_name,
            'url'  => $layer_url,
            'attribution' => $layer_attribution,
            // Puedes agregar más opciones aquí
        );

        update_option('nm_base_layers', $base_layers);

        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la eliminación de capas base
    public function handle_delete_base_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_base_layer_' . $index);

        $base_layers = get_option('nm_base_layers', array());
        if (isset($base_layers[$index])) {
            unset($base_layers[$index]);
            $base_layers = array_values($base_layers); // Reindexar el array
            update_option('nm_base_layers', $base_layers);
        }

        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la adición de capas overlay
    public function handle_add_overlay_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_overlay_layer', 'nm_nonce');

        // Procesar los datos del formulario
        $overlay_name = sanitize_text_field($_POST['overlay_name']);
        $overlay_type = sanitize_text_field($_POST['overlay_type']);
        $overlay_url = nm_sanitize_tile_url($_POST['overlay_url']);
        $wms_layer_name = isset($_POST['wms_layer_name']) ? sanitize_text_field($_POST['wms_layer_name']) : '';

        $overlay_layers = get_option('nm_overlay_layers', array());

        $overlay_layers[] = array(
            'name' => $overlay_name,
            'type' => $overlay_type,
            'url'  => $overlay_url,
            'wms_layer_name' => $wms_layer_name,
            // Puedes agregar más opciones aquí
        );

        update_option('nm_overlay_layers', $overlay_layers);

        // Clear the WordPress cache
        wp_cache_flush();

        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la eliminación de capas overlay
    public function handle_delete_overlay_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_overlay_layer_' . $index);

        $overlay_layers = get_option('nm_overlay_layers', array());
        if (isset($overlay_layers[$index])) {
            unset($overlay_layers[$index]);
            $overlay_layers = array_values($overlay_layers); // Reindexar el array
            update_option('nm_overlay_layers', $overlay_layers);
        }
        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    public function enqueue_admin_assets()
    {
        wp_enqueue_style('nm-admin-css', NM_PLUGIN_URL . 'admin/css/admin.css', array(), NM_VERSION);
        wp_enqueue_style('nm-entries-css', NM_PLUGIN_URL . 'admin/css/entries.css', array(), NM_VERSION);

        // Encolar CSS y JS de Leaflet
        wp_enqueue_style('leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), null);
        wp_enqueue_script('leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), null, true);



        wp_enqueue_script('nm-admin-js', NM_PLUGIN_URL . 'admin/js/admin.js', array('jquery', 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable'), NM_VERSION, true);
        wp_enqueue_script('nm-entries-js', NM_PLUGIN_URL . 'admin/js/entries.js', array('jquery', 'leaflet-js'), NM_VERSION, true);
        wp_localize_script('nm-admin-js', 'nmAdmin', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce'    => wp_create_nonce('nm_admin_nonce')
        ));
    }

    public function save_form()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $form_data = $_POST['form_data'];
        $this->model->save_form($form_data);
        wp_send_json_success('Form saved successfully');
    }

    public function get_field_template()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $field_type = sanitize_text_field($_POST['field_type']);

        ob_start();
        include 'views/field-templates/' . $field_type . '.php';
        $field_html = ob_get_clean();

        wp_send_json_success($field_html);
    }

    public function get_entries()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $entries = $this->model->get_entries();
        wp_send_json_success($entries);
    }

    public function update_entry_status()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $entry_id = intval($_POST['entry_id']);
        $status = sanitize_text_field($_POST['status']);
        $this->model->update_entry_status($entry_id, $status);
        wp_send_json_success('Entry status updated');
    }


    public function register_map_settings()
    {
        register_setting('nm_map_settings_group', 'nm_enable_geojson_download'); // opción para habilitar la descarga de GeoJSON
        register_setting('nm_map_settings_group', 'nm_enable_search'); // opción para habilitar la búsqueda
        register_setting('nm_map_settings_group', 'nm_enable_user_wms'); // Opción para habilitar que el usuario pueda agregar WMS

        add_settings_section(
            'nm_map_settings_section',
            __('Map Options', 'nexusmap'),
            null,
            'nm_map_settings'
        );

        add_settings_field(
            'nm_enable_geojson_download',
            __('Enable GeoJSON Download', 'nexusmap'),
            array($this, 'render_geojson_download_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_search',
            __('Enable Map Search', 'nexusmap'),
            array($this, 'render_map_search_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
        // Agregar el campo add user wms
        add_settings_field(
            'nm_enable_user_wms',
            __('Enable User WMS Layers', 'nexusmap'),
            array($this, 'render_user_wms_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
    }

    //funcion para renderizar el campo de descarga de GeoJSON
    public function render_geojson_download_field()
    {
        $option = get_option('nm_enable_geojson_download', false);
?>
        <input type="checkbox" name="nm_enable_geojson_download" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_geojson_download"><?php esc_html_e('Enable the option to download map data as GeoJSON.', 'nexusmap'); ?></label>
    <?php
    }

    //funcion para renderizar el campo de búsqueda en el mapa
    public function render_map_search_field()
    {
        $option = get_option('nm_enable_search', false);
    ?>
        <input type="checkbox" name="nm_enable_search" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_search"><?php esc_html_e('Enable the search functionality on the map.', 'nexusmap'); ?></label>
    <?php
    }

    public function render_user_wms_field()
    {
        $option = get_option('nm_enable_user_wms', false);
    ?>
        <input type="checkbox" name="nm_enable_user_wms" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_user_wms"><?php esc_html_e('Allow users to add WMS layers to the map.', 'nexusmap'); ?></label>
<?php
    }
}

================
File: admin/js/admin.js
================
jQuery(document).ready(function ($) {
    // Drag and Drop Fields
    $('#nm-form-elements li').draggable({
        helper: 'clone',
        revert: 'invalid'
    });

    $('#nm-custom-form').droppable({
        accept: '#nm-form-elements li',
        drop: function (event, ui) {
            var fieldType = ui.draggable.data('type');
            // AJAX call to get field template
            $.post(nmAdmin.ajax_url, {
                action: 'nm_get_field_template',
                field_type: fieldType,
                nonce: nmAdmin.nonce
            }, function (response) {
                if (response.success) {
                    $('#nm-custom-form').append(response.data);
                } else {
                    alert('Error loading field template.');
                }
            });
        }
    });

    // Make form fields sortable
    $('#nm-custom-form').sortable();

    // Remove Field
    $(document).on('click', '.nm-remove-field', function () {
        $(this).closest('.nm-form-field').remove();
    });

    // Añadir nueva opción de radio
    $(document).on('click', '.add-radio-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.radio-options');
        var newOption = '<div class="radio-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Añadir nueva opción de checkbox
    $(document).on('click', '.add-checkbox-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.checkbox-options');
        var newOption = '<div class="checkbox-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Añadir nueva opción de select
    $(document).on('click', '.add-select-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.select-options');
        var newOption = '<div class="select-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Eliminar opción de radio
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.radio-option').remove();
    });

    // Eliminar opción de checkbox
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.checkbox-option').remove();
    });

    // Eliminar opción de select
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.select-option').remove();
    });

    // Modificar la función de guardar formulario para incluir checkboxes
    $('#nm-save-form').click(function () {
        var formFields = [];
        $('#nm-custom-form .nm-form-field').each(function () {
            var fieldType = $(this).data('type');
            var fieldLabel = $(this).find('.field-label').val() || '';
            var fieldName = $(this).find('.field-name').val() || '';
            var fieldOptions = [];

            // Collect options if the field has them
            if (fieldType === 'select' || fieldType === 'checkbox' || fieldType === 'radio') {
                $(this).find('.field-option').each(function () {
                    var optionValue = $(this).val();
                    if (optionValue) {
                        fieldOptions.push(optionValue);
                    }
                });
            }

            var fieldData = {
                type: fieldType,
                label: fieldLabel,
                name: fieldName
            };

            if (fieldOptions.length > 0) {
                fieldData.options = fieldOptions;
            }

            formFields.push(fieldData);
        });

        // Send formFields to the server via AJAX
        $.post(nmAdmin.ajax_url, {
            action: 'nm_save_form',
            form_data: { fields: formFields },
            nonce: nmAdmin.nonce
        }, function (response) {
            if (response.success) {
                alert('Form saved successfully.');
            } else {
                alert('Error saving form.');
            }
        });
    });
    // Entries Page Actions
    $('.approve-entry').click(function () {
        var entryId = $(this).data('id');
        updateEntryStatus(entryId, 'approved');
    });

    $('.reject-entry').click(function () {
        var entryId = $(this).data('id');
        updateEntryStatus(entryId, 'rejected');
    });

    function updateEntryStatus(entryId, status) {
        $.post(nmAdmin.ajax_url, {
            action: 'nm_update_entry_status',
            entry_id: entryId,
            status: status,
            nonce: nmAdmin.nonce
        }, function (response) {
            if (response.success) {
                location.reload();
            } else {
                alert('Error updating entry status.');
            }
        });
    }
});

================
File: admin/js/entries.js
================
jQuery(document).ready(function ($) {
    var map;  // Definir el mapa como una variable global

    // Función para comprobar si una cadena es una URL
    function isUrl(string) {

        try {
            new URL(string);

            return true;
        } catch (_) {
            return false;
        }
    }

    // Función para determinar si una URL es una imagen o un PDF
    function getFileType(url) {
        var extension = url.split('.').pop().toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].includes(extension)) {
            return 'image';
        } else if (extension === 'pdf') {
            return 'pdf';
        }
        return null;
    }

    // Cuando se hace clic en el botón "Ver Datos"
    $('.view-data').on('click', function () {
        var jsonData = $(this).data('json');  // Obtiene el JSON deserializado desde PHP


        // Aquí accedemos a los datos específicos del objeto JSON
        var mapData = jsonData.map_data;  // Obtiene la cadena JSON escapada de la base de datos

        // Decodifica la cadena JSON escapada antes de parsearla
        var decodedMapData = decodeEscapedJsonString(mapData);

        // Intenta analizar el JSON decodificado
        try {
            var feature = JSON.parse(decodedMapData)[0];  // Toma el primer elemento del array de features
        } catch (error) {
            console.error('Error al analizar el JSON: ', error);
            return;
        }

        var geometry = feature.geometry;  // Extrae la geometría del feature
        var properties = feature.properties;  // Extrae las propiedades del feature

        // Muestra el modal
        $('#dataModal').show();

        // Si el mapa ya ha sido inicializado, eliminamos el mapa anterior
        if (map) {
            map.remove();
        }

        // Cargar el mapa de Leaflet dentro del modal
        setTimeout(function () {  // Usar un timeout para asegurarnos de que el modal se haya mostrado
            map = L.map('map').setView([0, 0], 2);  // Inicializa el mapa con una vista global

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 18,
            }).addTo(map);

         
                  function addGeometryToMap(geometry) {
                console.log('Processing geometry type:', geometry.type);
                var type = geometry.type.toLowerCase();
                
                if (type === 'point') {
                    var latLng = [geometry.coordinates[1], geometry.coordinates[0]];
                    console.log('Adding Point:', latLng);
                    L.marker(latLng).addTo(map);
                    bounds.extend(latLng);
                } else if (type === 'polygon' || type === 'multipolygon') {
                    console.log('Adding Polygon:', geometry.coordinates);
                    var latLngs;
                
                    if (type === 'polygon') {
                        latLngs = geometry.coordinates[0].map(function (coord) {
                            return [coord[1], coord[0]];
                        });
                    } else if (type === 'multipolygon') {
                        latLngs = geometry.coordinates.map(function (polygon) {
                            return polygon[0].map(function (coord) {
                                return [coord[1], coord[0]];
                            });
                        }).flat();
                    }
                
                    console.log('Polygon LatLngs:', latLngs);
                    L.polygon(latLngs, {
                        color: '#237CC9',
                        fillColor: '#237CC9',
                        fillOpacity: 0.5
                    }).addTo(map);
                    latLngs.forEach(function(latLng) {
                        bounds.extend(latLng);
                    });
                } else if (geometry.type === 'GeometryCollection') {
                    console.log('Adding GeometryCollection:', geometry.geometries);
                    geometry.geometries.forEach(function (geom) {
                        addGeometryToMap(geom);
                    });
                } else {
                    console.log('Unknown geometry type:', geometry.type);
                }
            }
            
            var bounds = L.latLngBounds();
            
            addGeometryToMap(geometry);
            
            if (bounds.isValid()) {
                map.fitBounds(bounds);
            }
            
            // Refresca el tamaño del mapa después de abrir el modal
            map.invalidateSize();
        
        }, 250);  // Retraso breve para asegurarse de que el modal esté visible

        // Mostrar el resto de las propiedades formateadas en el modal
        var propertyHtml = '';

        $.each(properties, function (key, value) {
            var cleanKey = key.replace('nm_', '');  // Elimina "nm_" del inicio del key
            var content = value;
         
            if (isUrl(content)) {
                var fileType = getFileType(content);
                if (fileType === 'image') {
                    content = '<img src="' + content + '" alt="' + cleanKey + '">';
                } else if (fileType === 'pdf') {
                    content = '<a href="' + content + '" target="_blank">Ver PDF</a>';
                } else {
                    content = '<a href="' + content + '" target="_blank">' + content + '</a>';
                }
            }

            // Construye la fila con el título en negrita y el contenido a la derecha
            propertyHtml += '<div class="property-item">';
            propertyHtml += '<strong>' + cleanKey + ':</strong>';
            propertyHtml += '<span>' + content + '</span>';
            propertyHtml += '</div>';
        });

        // Inserta el contenido en el modal
        $('#jsonData').html(propertyHtml);
    });

    // Cerrar el modal cuando se hace clic en el botón de cerrar
    $('.close').on('click', function () {
        $('#dataModal').hide();
    });
});



function decodeEscapedJsonString(escapedString) {
    // Reemplaza todas las secuencias de escape que están duplicadas para que sea un JSON válido
    return escapedString
        .replace(/\\"/g, '"')  // Reemplaza las comillas escapadas
        .replace(/\\n/g, '')   // Remueve los saltos de línea escapados
        .replace(/\\r/g, '')   // Remueve los retornos de carro escapados
        .replace(/\\\\/g, '\\');  // Reemplaza las barras invertidas dobles con una sola barra invertida
}

================
File: admin/NM_Ajax_Handlers.php
================
<?php

class NM_Ajax_Handlers
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;

        // Registro de acciones AJAX
        $this->loader->add_action('wp_ajax_nm_save_form', $this, 'save_form');
        $this->loader->add_action('wp_ajax_nm_get_field_template', $this, 'get_field_template');
        $this->loader->add_action('wp_ajax_nm_get_entries', $this, 'get_entries');
        $this->loader->add_action('wp_ajax_nm_update_entry_status', $this, 'update_entry_status');
    }

    // Función para guardar el formulario
    public function save_form()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        
        $form_data = isset($_POST['form_data']) ? $_POST['form_data'] : '';

        if ($form_data) {
            $this->model->save_form($form_data);
            wp_send_json_success(__('Form saved successfully', 'nexusmap'));
        } else {
            wp_send_json_error(__('Form data is missing', 'nexusmap'));
        }
    }

    // Función para obtener la plantilla de un campo específico
    public function get_field_template()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $field_type = sanitize_text_field($_POST['field_type']);
        ob_start();
        
        if ($field_type) {
            include 'views/field-templates/' . $field_type . '.php';
            $field_html = ob_get_clean();
            wp_send_json_success($field_html);
        } else {
            wp_send_json_error(__('Field type is missing', 'nexusmap'));
        }
    }

    // Función para obtener entradas
    public function get_entries()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $entries = $this->model->get_entries();
        if ($entries) {
            wp_send_json_success($entries);
        } else {
            wp_send_json_error(__('No entries found', 'nexusmap'));
        }
    }

    // Función para actualizar el estado de una entrada
    public function update_entry_status()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $entry_id = intval($_POST['entry_id']);
        $status = sanitize_text_field($_POST['status']);

        if ($entry_id && $status) {
            $this->model->update_entry_status($entry_id, $status);
            wp_send_json_success(__('Entry status updated', 'nexusmap'));
        } else {
            wp_send_json_error(__('Entry ID or status is missing', 'nexusmap'));
        }
    }
}

================
File: admin/NM_Entries.php
================
<?php

class NM_Entries
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;
        $this->loader->add_action('admin_menu', $this, 'add_entries_submenu');
    }

    public function add_entries_submenu()
    {
        add_submenu_page('nm', 'Form Entries', 'Entries', 'manage_options', 'nm-entries', array($this, 'display_entries_page'));
    }

    public function display_entries_page()
    {
        $entries = $this->model->get_entries();
        include_once 'views/entries-list.php';
    }
}

================
File: admin/NM_Manage_Layers.php
================
<?php

class NM_Manage_Layers
{
    private $loader;

    public function __construct($loader)
    {
        $this->loader = $loader;
        
        // Registro de acciones de menú y de manejo de capas
        $this->loader->add_action('admin_menu', $this, 'add_layers_submenu');
        $this->loader->add_action('admin_post_nm_add_base_layer_action', $this, 'handle_add_base_layer');
        $this->loader->add_action('admin_post_nm_delete_base_layer_action', $this, 'handle_delete_base_layer');
        $this->loader->add_action('admin_post_nm_add_overlay_layer_action', $this, 'handle_add_overlay_layer');
        $this->loader->add_action('admin_post_nm_delete_overlay_layer_action', $this, 'handle_delete_overlay_layer');
    }

    // Añadir submenú para gestionar capas
    public function add_layers_submenu()
    {
        add_submenu_page(
            'nm',
            __('Manage Layers', 'nexusmap'),
            __('Manage Layers', 'nexusmap'),
            'manage_options',
            'nm_manage_layers',
            array($this, 'display_manage_layers_page')
        );
    }

    // Mostrar la página de gestión de capas
    public function display_manage_layers_page()
    {
        include_once 'views/manage-layers.php';
    }

    // Manejar la adición de capas base
    public function handle_add_base_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_base_layer', 'nm_nonce');

        $layer_name = sanitize_text_field($_POST['layer_name']);
        $layer_url = nm_sanitize_tile_url($_POST['layer_url']);
        $layer_attribution = sanitize_textarea_field($_POST['layer_attribution']);

        $base_layers = get_option('nm_base_layers', array());

        $base_layers[] = array(
            'name' => $layer_name,
            'url'  => $layer_url,
            'attribution' => $layer_attribution,
        );

        update_option('nm_base_layers', $base_layers);
        wp_cache_flush();

        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la eliminación de capas base
    public function handle_delete_base_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_base_layer_' . $index);

        $base_layers = get_option('nm_base_layers', array());
        if (isset($base_layers[$index])) {
            unset($base_layers[$index]);
            $base_layers = array_values($base_layers);
            update_option('nm_base_layers', $base_layers);
        }

        wp_cache_flush();
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la adición de capas overlay
    public function handle_add_overlay_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_overlay_layer', 'nm_nonce');

        $overlay_name = sanitize_text_field($_POST['overlay_name']);
        $overlay_type = sanitize_text_field($_POST['overlay_type']);
        $overlay_url = nm_sanitize_tile_url($_POST['overlay_url']);
        $wms_layer_name = isset($_POST['wms_layer_name']) ? sanitize_text_field($_POST['wms_layer_name']) : '';

        $overlay_layers = get_option('nm_overlay_layers', array());

        $overlay_layers[] = array(
            'name' => $overlay_name,
            'type' => $overlay_type,
            'url'  => $overlay_url,
            'wms_layer_name' => $wms_layer_name,
        );

        update_option('nm_overlay_layers', $overlay_layers);
        wp_cache_flush();

        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la eliminación de capas overlay
    public function handle_delete_overlay_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_overlay_layer_' . $index);

        $overlay_layers = get_option('nm_overlay_layers', array());
        if (isset($overlay_layers[$index])) {
            unset($overlay_layers[$index]);
            $overlay_layers = array_values($overlay_layers);
            update_option('nm_overlay_layers', $overlay_layers);
        }

        wp_cache_flush();
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }
}

================
File: admin/NM_Map_Settings.php
================
<?php

class NM_Map_Settings
{
    private $loader;

    public function __construct($loader)
    {
        $this->loader = $loader;

        // Registro de acciones para el submenú y la configuración del mapa
        $this->loader->add_action('admin_menu', $this, 'add_map_settings_submenu');
        $this->loader->add_action('admin_init', $this, 'register_map_settings');
    }

    // Función para añadir el submenú de configuración del mapa en el panel de administración
    public function add_map_settings_submenu()
    {
        add_submenu_page(
            'nm',
            __('Map Settings', 'nexusmap'),
            __('Map Settings', 'nexusmap'),
            'manage_options',
            'nm_map_settings',
            array($this, 'display_map_settings_page')
        );
    }

    // Función para mostrar la página de configuración del mapa
    public function display_map_settings_page()
    {
        ?>
        <div class="wrap">
            <h1><?php esc_html_e('Map Settings', 'nexusmap'); ?></h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('nm_map_settings_group');
                do_settings_sections('nm_map_settings');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    // Función para registrar las configuraciones del mapa
    public function register_map_settings()
    {
        register_setting('nm_map_settings_group', 'nm_enable_geojson_download'); // Opción para habilitar la descarga de GeoJSON
        register_setting('nm_map_settings_group', 'nm_enable_search'); // Opción para habilitar la búsqueda en el mapa
        register_setting('nm_map_settings_group', 'nm_enable_user_wms'); // Opción para permitir al usuario agregar capas WMS

        add_settings_section(
            'nm_map_settings_section',
            __('Map Options', 'nexusmap'),
            null,
            'nm_map_settings'
        );

        add_settings_field(
            'nm_enable_geojson_download',
            __('Enable GeoJSON Download', 'nexusmap'),
            array($this, 'render_geojson_download_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_search',
            __('Enable Map Search', 'nexusmap'),
            array($this, 'render_map_search_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_user_wms',
            __('Enable User WMS Layers', 'nexusmap'),
            array($this, 'render_user_wms_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
    }

    // Función para renderizar el campo de descarga de GeoJSON
    public function render_geojson_download_field()
    {
        $option = get_option('nm_enable_geojson_download', false);
        ?>
        <input type="checkbox" name="nm_enable_geojson_download" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_geojson_download"><?php esc_html_e('Enable the option to download map data as GeoJSON.', 'nexusmap'); ?></label>
        <?php
    }

    // Función para renderizar el campo de búsqueda en el mapa
    public function render_map_search_field()
    {
        $option = get_option('nm_enable_search', false);
        ?>
        <input type="checkbox" name="nm_enable_search" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_search"><?php esc_html_e('Enable the search functionality on the map.', 'nexusmap'); ?></label>
        <?php
    }

    // Función para renderizar el campo que permite al usuario agregar capas WMS
    public function render_user_wms_field()
    {
        $option = get_option('nm_enable_user_wms', false);
        ?>
        <input type="checkbox" name="nm_enable_user_wms" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_user_wms"><?php esc_html_e('Allow users to add WMS layers to the map.', 'nexusmap'); ?></label>
        <?php
    }
}

================
File: admin/NM_Menu_Main.php
================
<?php

class NM_Menu_Main
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;
        $this->loader->add_action('admin_menu', $this, 'add_plugin_admin_menu');
    }

    public function add_plugin_admin_menu()
    {
        add_menu_page('NexusMap', 'NexusMap', 'manage_options', 'nm', array($this, 'display_plugin_setup_page'), 'dashicons-location-alt', 25);
    }

    public function display_plugin_setup_page()
    {
        $form_data = $this->model->get_form();
        include_once 'views/form-builder.php';
    }
}

================
File: form-builder.php
================
<div class="wrap">
    <h1>Form Builder</h1>
    <div id="nm-form-builder">
        <div id="nm-form-elements">
            <h2>Available Fields</h2>
            <ul>
                <li data-type="text">Text Field</li>
                <li data-type="textarea">Textarea</li>
                <li data-type="checkbox">Checkbox Group</li>
                <li data-type="radio">Radio Group</li>
                <li data-type="select">Dropdown Menu</li>
                <li data-type="file">File Upload</li>
                <li data-type="number">Number Field</li>
                <li data-type="date">Date Picker</li>
                <li data-type="url">URL Field</li>
                <li data-type="range">Range Slider</li>
            </ul>
        </div>
        <div id="nm-form-preview">
            <h2>Your Form</h2>
            <form id="nm-custom-form">
                <!-- Fixed Fields -->
                <div class="nm-form-field" data-type="title">
                    <label>Title</label>
                    <input type="text" name="title" required>
                </div>
                <div class="nm-form-field" data-type="image">
                    <label>Image</label>
                    <input type="file" name="image" accept="image/*">
                </div>
                <div class="nm-form-field" data-type="map">
                    <label>Map Drawing</label>
                    <div id="nm-map-canvas"></div>
                </div>
                <!-- Dynamic Fields Will Be Added Here -->
                <?php
                if ( isset( $form_data['fields'] ) && is_array( $form_data['fields'] ) ) {
                    foreach ( $form_data['fields'] as $field ) {
                        include 'field-templates/' . $field['type'] . '.php';
                    }
                }
                ?>
            </form>
            <button id="nm-save-form" class="button button-primary">Save Form</button>
        </div>
    </div>
</div>

================
File: nexusmap.php
================
<?php
/**
 * Plugin Name: NexusMap
 * Description: A plugin for collaborative mapping using Leaflet.
 * Version: 1.0.0
 * Author: Your Name
 * Text Domain: nexusmap
 */

if ( ! defined( 'WPINC' ) ) {
    die;
}

define( 'NM_VERSION', '1.0.0' );
define( 'NM_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
define( 'NM_PLUGIN_URL', plugin_dir_url( __FILE__ ) );

// Incluir las clases necesarias
require_once NM_PLUGIN_DIR . 'includes/class-nm.php';
require_once NM_PLUGIN_DIR . 'includes/models/class-nm-model.php';
require_once NM_PLUGIN_DIR . 'includes/class-nm-activator.php';
require_once NM_PLUGIN_DIR . 'includes/class-nm-deactivator.php';

// Incluir el archivo de funciones utilitarias
include_once plugin_dir_path(__FILE__) . 'nm-utils.php';

// Registrar los hooks de activación y desactivación
register_activation_hook( __FILE__, array( 'NM_Activator', 'activate' ) );
register_deactivation_hook( __FILE__, array( 'NM_Deactivator', 'deactivate' ) );

function console_log($message) {
    echo '<script type="text/javascript">';
    echo 'console.log(' . json_encode($message) . ');';
    echo '</script>';
}

function run_nm() {
    $plugin = new NM();
    $plugin->run();
}
run_nm();

================
File: nm-utils.php
================
<?php
// Evitar el acceso directo al archivo
if (!defined('ABSPATH')) {
    exit;
}

    function nm_sanitize_tile_url($url) {
        // Quitar espacios en blanco al inicio y al final
        $url = trim($url);
        // Validar que sea una URL válida o una ruta relativa
        if (preg_match('/^https?:\/\/[^\s\{\}]+(?:\{[^\s\{\}]*\}[^\s\{\}]*)*$/', $url) || preg_match('/^\//', $url)) {
            return $url;
        } else {
            return $url; // Devolver la URL tal como se pasa
        }
    }

================
File: public/class-nm-public.php
================
<?php

class NM_Public
{

    private $loader;
    private $model;

    public function __construct($loader)
    {
        $this->loader = $loader;
        $this->model = new NM_Model();

        // Register the shortcodes during the 'init' action
        $this->loader->add_action('init', $this, 'register_shortcodes');



        // Enqueue public assets
        $this->loader->add_action('wp_enqueue_scripts', $this, 'enqueue_public_assets');

        // AJAX actions
        $this->loader->add_action('wp_ajax_nm_get_map_points', $this, 'get_map_points');
        $this->loader->add_action('wp_ajax_nopriv_nm_get_map_points', $this, 'get_map_points');
        $this->loader->add_action('wp_ajax_nm_submit_form', $this, 'submit_form');

        // Registrar la acción AJAX para descargar el GeoJSON
        $this->loader->add_action('wp_ajax_nm_download_geojson', $this, 'download_geojson');
        $this->loader->add_action('wp_ajax_nopriv_nm_download_geojson', $this, 'download_geojson');

        // Register the AJAX action to get entry details para MOdal
        $this->loader->add_action('wp_ajax_nm_get_entry_details', $this, 'get_entry_details');
        $this->loader->add_action('wp_ajax_nopriv_nm_get_entry_details', $this, 'get_entry_details');
    }

    /**
     * Register shortcodes
     */
    public function register_shortcodes()
    {
        add_shortcode('nm_map', array($this, 'display_main_map'));
        add_shortcode('nm_form', array($this, 'display_custom_form'));
    }

    /**
     * Display the main map shortcode
     */
    public function display_main_map($atts)
    {
        // Extract attributes and set defaults
        $atts = shortcode_atts(array(
            'width'  => '100%',
            'height' => '500px',
            'lat'    => '0',
            'lng'    => '0',
            'zoom'   => '2',
        ), $atts, 'nm_map');

        ob_start();
        include NM_PLUGIN_DIR . 'public/views/main-map.php';
        return ob_get_clean();
    }

    /**
     * Display the custom form shortcode
     */
    public function display_custom_form()
    {
        if (! is_user_logged_in()) {
            return 'You must be logged in to view this form.';
        }

        $form_data = $this->model->get_form();

        ob_start();
        include NM_PLUGIN_DIR . 'public/views/form-display.php';
        return ob_get_clean();
    }

    /**
     * Enqueue public assets
     */
    public function enqueue_public_assets()
    {
        global $post;

        // Enqueue styles that are needed in both cases
        wp_enqueue_style('nm-public-css', NM_PLUGIN_URL . 'public/css/public.css', array(), NM_VERSION);
        wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css');

        // Check if the [nm_map] shortcode is used in the content
        if (has_shortcode($post->post_content, 'nm_map')) {
            // Enqueue Leaflet CSS and JS
            wp_enqueue_style('nm-leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), '1.7.1');
            wp_enqueue_script('nm-leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), '1.7.1', true);



            // Enqueue Leaflet Control Geocoder
            wp_enqueue_style('leaflet-geocoder-css', 'https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css', array(), '1.13.0');
            wp_enqueue_script('leaflet-geocoder-js', 'https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js', array('nm-leaflet-js'), '1.13.0', true);

            // Enqueue functions related to the map
            wp_enqueue_script('nm-funcionesmaps-js', NM_PLUGIN_URL . 'public/js/funcionesmaps.js', array('jquery', 'nm-leaflet-js', 'leaflet-geocoder-js'), NM_VERSION, true);
            wp_enqueue_script('nm-public-js', NM_PLUGIN_URL . 'public/js/public.js', array('jquery', 'nm-leaflet-js', 'leaflet-geocoder-js', 'nm-funcionesmaps-js'), NM_VERSION, true);
        }

        // Check if the [nm_form] shortcode is used in the content
        if (has_shortcode($post->post_content, 'nm_form')) {
            // Enqueue Leaflet CSS and JS
            wp_enqueue_style('nm-leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), '1.7.1');
            wp_enqueue_script('nm-leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), '1.7.1', true);
            // Enqueue Leaflet Draw CSS and JS
            wp_enqueue_style('nm-leaflet-draw-css', 'https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css', array('nm-leaflet-css'), '1.0.4');
            wp_enqueue_script('nm-leaflet-draw-js', 'https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js', array('nm-leaflet-js'), '1.0.4', true);

            // Enqueue styles and scripts for the form
            wp_enqueue_style('nm-form-css', NM_PLUGIN_URL . 'public/css/form.css', array(), NM_VERSION);
            // Enqueue funcionesmaps.js
            wp_enqueue_script('nm-form-js', NM_PLUGIN_URL . 'public/js/form.js', array('jquery', 'nm-leaflet-js', 'nm-leaflet-draw-js'), NM_VERSION, true);

            // Localize script for AJAX handling
            wp_localize_script('nm-form-js', 'nmPublic', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce'    => wp_create_nonce('nm_public_nonce')
            ));
        }
    }



    /**
     * Get map points via AJAX
     */
    public function get_map_points()
    {
        check_ajax_referer('nm_public_nonce', 'nonce');
        $entries = $this->model->get_entries('approved');
        $features = array();

        foreach ($entries as $entry) {
            $entry_data = maybe_unserialize($entry->entry_data);
            if (isset($entry_data['map_data'])) {
                $map_data = json_decode(stripslashes($entry_data['map_data']), true);
                if (json_last_error() === JSON_ERROR_NONE && is_array($map_data)) {
                    foreach ($map_data as $feature) {
                        // Agregar todas las propiedades del entry_data al properties
                        foreach ($entry_data as $key => $value) {
                            if ($key !== 'map_data') { // Excluir 'map_data' si está
                                $feature['properties'][$key] = esc_html($value);
                            }
                        }
                        // Agregar el entry_id
                        $feature['properties']['entry_id'] = $entry->id;

                        $features[] = $feature;
                    }
                } else {
                    error_log('Error decoding map_data for entry ID ' . $entry->id . ': ' . json_last_error_msg());
                }
            }
        }

        wp_send_json($features);
    }



    // Método para obtener detalles de la entrada
    public function get_entry_details()
    {
        check_ajax_referer('nm_public_nonce', 'nonce');
        $entry_id = isset($_POST['entry_id']) ? intval($_POST['entry_id']) : 0;

        if ($entry_id > 0) {
            $entry = $this->model->get_entry_by_id($entry_id);

            if ($entry) {
                $entry_data = maybe_unserialize($entry->entry_data);
                // Puedes seleccionar qué campos enviar al cliente
                $response_data = array(
                    'title'       => isset($entry_data['title']) ? esc_html($entry_data['title']) : 'Sin título',
                    'description' => isset($entry_data['description']) ? esc_html($entry_data['description']) : '',
                    // Agrega más campos según tus necesidades
                    // 'date' => $entry->date_created,
                    // 'other_field' => isset( $entry_data['other_field'] ) ? esc_html( $entry_data['other_field'] ) : '',
                );
                wp_send_json_success($response_data);
            } else {
                wp_send_json_error('Entrada no encontrada.');
            }
        } else {
            wp_send_json_error('ID de entrada no válido.');
        }
    }

    public function submit_form()
    {
        // Verify nonce for security
        check_ajax_referer('nm_public_nonce', 'nonce');

        // Collect form fields (excluding 'action', 'nonce', 'map_data')
        $form_fields = array();
        foreach ($_POST as $key => $value) {
            if (in_array($key, array('action', 'nonce', 'map_data'))) {
                continue;
            }
            if (is_array($value)) {
                $sanitized_value = array_map('sanitize_text_field', $value);
                $form_fields['nm_' . $key] = $sanitized_value;
            } else {
                $form_fields['nm_' . $key] = sanitize_text_field($value);
            }
        }

        // Handle file uploads
        if (!empty($_FILES)) {
            foreach ($_FILES as $file_key => $file_array) {
                // Verify if the file was uploaded without errors
                if ($file_array['error'] === UPLOAD_ERR_OK) {
                    // Specify allowed file types
                    $allowed_types = array(
                        'jpg|jpeg|jpe' => 'image/jpeg',
                        'png'          => 'image/png',
                        'gif'          => 'image/gif',
                        'pdf'          => 'application/pdf',
                        // Add other file types if necessary
                    );

                    // Handle file upload
                    $uploaded_file = wp_handle_upload($file_array, array(
                        'test_form' => false,
                        'mimes'     => $allowed_types,
                    ));

                    if ($uploaded_file && !isset($uploaded_file['error'])) {
                        // Upload was successful, get the file URL
                        $file_url = $uploaded_file['url'];
                        // Add the file URL to $form_fields
                        $form_fields['nm_' . $file_key] = esc_url_raw($file_url);
                    } else {
                        // Handle upload error
                        wp_send_json_error('Error al subir el archivo: ' . $uploaded_file['error']);
                        wp_die();
                    }
                } elseif ($file_array['error'] !== UPLOAD_ERR_NO_FILE) {
                    // Handle other upload errors
                    wp_send_json_error('Código de error al subir el archivo: ' . $file_array['error']);
                    wp_die();
                }
                // If UPLOAD_ERR_NO_FILE, no file was uploaded for this field; you can skip it
            }
        }

        // Get 'map_data' from $_POST
        if (isset($_POST['map_data'])) {
            $map_data_json = stripslashes($_POST['map_data']);
            $map_data = json_decode($map_data_json, true);
            if ($map_data === null && json_last_error() !== JSON_ERROR_NONE) {
                wp_send_json_error('Datos JSON inválidos para map_data.');
                wp_die();
            }
        } else {
            wp_send_json_error('No se proporcionó map_data.');
            wp_die();
        }

        // Assign the form_fields to the 'properties' of the Feature
        $map_data['properties'] = $form_fields;

        // Ensure 'geometry' comes before 'properties' in the JSON
        $ordered_map_data = array(
            'type' => $map_data['type'],
            'geometry' => $map_data['geometry'],
            'properties' => $map_data['properties']
        );

        // Re-encode the JSON without escaping unicode and slashes
        $final_map_data_json = json_encode([$ordered_map_data], JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

        // Escape the JSON string
        $final_map_data_json_escaped = addslashes($final_map_data_json);

        // Prepare the data to be saved
        $entry_data = array();
        $entry_data['map_data'] = $final_map_data_json_escaped;


        // Save the data using your model's save_entry method
        $user_id = get_current_user_id();
        $this->model->save_entry($entry_data, $user_id);

        // Send notification to the administrator
        wp_mail(get_option('admin_email'), 'Nueva presentación de formulario', 'Se ha enviado un nuevo formulario y está pendiente de aprobación.');

        // Send success response
        wp_send_json_success('Formulario enviado exitosamente.');
    }






    public function download_geojson()
    {
        check_ajax_referer('nm_public_nonce', 'nonce');

        $entries = $this->model->get_entries('approved');
        $features = array();

        foreach ($entries as $entry) {
            $entry_data = maybe_unserialize($entry->entry_data);
            if (isset($entry_data['map_data'])) {
                $map_data = json_decode(stripslashes($entry_data['map_data']), true);
                if (json_last_error() === JSON_ERROR_NONE && is_array($map_data)) {
                    foreach ($map_data as $feature) {
                        // Agregar información adicional si es necesario
                        $feature['properties']['title'] = isset($entry_data['title']) ? esc_html($entry_data['title']) : 'Sin título';
                        $features[] = $feature;
                    }
                } else {
                    error_log('Error decoding map_data for entry ID ' . $entry->id . ': ' . json_last_error_msg());
                }
            }
        }

        $geojson = array(
            'type'     => 'FeatureCollection',
            'features' => $features
        );

        wp_send_json_success($geojson);
    }
}

================
File: public/js/form.js
================
jQuery(document).ready(function ($) {
if ($('#nm-user-form').length) {
    // Initialize map drawing
    var drawMap = L.map('nm-map-canvas').setView([0, 0], 2);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(drawMap);

    var drawnItems = new L.FeatureGroup();
    drawMap.addLayer(drawnItems);

    var drawControl = new L.Control.Draw({
        edit: {
            featureGroup: drawnItems
        }
    });
    drawMap.addControl(drawControl);

    drawMap.on(L.Draw.Event.CREATED, function (e) {
        drawnItems.addLayer(e.layer);
    });

    $('#nm-user-form').submit(function (e) {
        e.preventDefault();
    
        var formData = new FormData(this);
    
        // Add the required 'action' parameter for WordPress
        formData.append('action', 'nm_submit_form');
    
        // Add the nonce for security verification
        formData.append('nonce', nmPublic.nonce);
    
        // Collect geometries
        var geometries = [];
        drawnItems.eachLayer(function (layer) {
            var geoJson = layer.toGeoJSON();
            geometries.push(geoJson.geometry);
        });
    
        // Determine if there's a single geometry or multiple geometries
        var geometry;
        if (geometries.length === 1) {
            // Single geometry
            geometry = geometries[0];
        } else if (geometries.length > 1) {
            // Multiple geometries: create a GeometryCollection
            geometry = {
                type: 'GeometryCollection',
                geometries: geometries
            };
        } else {
            // No geometries drawn
            alert('Por favor, dibuje al menos una geometría en el mapa.');
            return;
        }
    
        // Collect form fields into an object
        var formFields = {};
        $('#nm-user-form').serializeArray().forEach(function (field) {
            // Handle multiple values for checkboxes
            if (formFields['nm_' + field.name]) {
                if (Array.isArray(formFields['nm_' + field.name])) {
                    formFields['nm_' + field.name].push(field.value);
                } else {
                    formFields['nm_' + field.name] = [formFields['nm_' + field.name], field.value];
                }
            } else {
                formFields['nm_' + field.name] = field.value;
            }
        });
    
        // Create a single Feature with geometry and properties
        var feature = {
            type: 'Feature',
            geometry: geometry,
            properties: formFields
        };
    
        // Ensure 'geometry' comes before 'properties' in the JSON
        var orderedFeature = {
            type: feature.type,
            geometry: feature.geometry,
            properties: feature.properties
        };
    
        // Append map data to form data
        formData.append('map_data', JSON.stringify(orderedFeature));
    
        // Send the AJAX request
        $.ajax({
            url: nmPublic.ajax_url,
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                alert('Formulario enviado exitosamente.');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('Error al enviar el formulario: ' + textStatus);
                console.error('AJAX Error:', textStatus, errorThrown);
            }
        });
    });
    


}

});

================
File: public/js/funcionesmaps.js
================
//funcion para descargar datos en formato geojson
// Manejar el botón de descarga
function downloadGeoJson() {
    $.ajax({
        url: nmMapData.ajax_url,
        method: 'POST',
        data: {
            action: 'nm_download_geojson',
            nonce: nmMapData.nonce
        },
        success: function (response) {
            if (response.success) {
                // Crear un enlace de descarga
                var blob = new Blob([JSON.stringify(response.data)], { type: 'application/json' });
                var url = URL.createObjectURL(blob);
                var a = document.createElement('a');
                a.href = url;
                a.download = 'nexusmap_data.geojson';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            } else {
                alert('Error downloading GeoJSON: ' + response.data);
            }
        },
        error: function () {
            alert('An error occurred while downloading GeoJSON.');
        }
    });
}

//funcion para abrir el control de busqueda
function toggleSearchInput() {
    var $searchInput = $('.nm-search-input');
    $searchInput.toggle();
    if ($searchInput.is(':visible')) {
        $searchInput.focus();
    }
}


function performSearch(query) {
    if (!query) {
        alert('Por favor, ingrese una ubicación para buscar.');
        return;
    }

    // Usar el geocodificador para obtener las coordenadas
    var geocoder = L.Control.Geocoder.nominatim(); // O el geocodificador que estés utilizando
    geocoder.geocode(query, function (results) {
        if (results && results.length > 0) {
            var result = results[0];
            map.setView(result.center, 18); // Ajusta el nivel de zoom según sea necesario
        } else {
            alert('No se encontraron resultados para: ' + query);
        }
    });
}


//funciones para mostrar datos de elementos puntuales
// Función para mostrar un modal con las propiedades de un elemento
function showModal(properties) {
    var modalContent = '<div class="nm-modal-content">';

    for (var key in properties) {
        if (properties.hasOwnProperty(key)) {
            // Omitir el 'entry_id' si aún está presente
            if (key === 'entry_id') {
                continue;
            }

            // Remover el prefijo 'nm_' si existe (si no lo has hecho ya en el servidor)
            var cleanKey = key.startsWith('nm_') ? key.substring(3) : key;

            // Formatear la clave para mostrarla como etiqueta
            var label = cleanKey.charAt(0).toUpperCase() + cleanKey.slice(1).replace(/_/g, ' ');

            var value = properties[key];

            // Verificar si el valor es una URL de archivo
            if (isValidURL(value) && isFile(value)) {
                // Determinar el tipo de archivo por la extensión
                var fileType = getFileExtension(value).toLowerCase();

                if (isImage(fileType)) {
                    // Mostrar la imagen
                    modalContent += '<p><strong>' + label + ':</strong><br><img src="' + value + '" alt="' + label + '" style="max-width:100%; height:auto;"></p>';
                } else if (fileType === 'pdf') {
                    // Mostrar un enlace al PDF
                    modalContent += '<p><strong>' + label + ':</strong> <a href="' + value + '" target="_blank">Ver documento PDF</a></p>';
                } else {
                    // Para otros tipos de archivos, mostrar un enlace de descarga
                    modalContent += '<p><strong>' + label + ':</strong> <a href="' + value + '" download>Descargar archivo</a></p>';
                }
            } else {
                // Mostrar el valor como texto
                modalContent += '<p><strong>' + label + ':</strong> ' + value + '</p>';
            }
        }
    }

    modalContent += '</div>';

    // Insertar el contenido en el cuerpo del modal
    $('#nm-modal-body').html(modalContent);

    // Mostrar el modal
    $('#nm-modal').css('display', 'block');

    // Manejar el cierre del modal
    $('#nm-modal-close').on('click', function () {
        $('#nm-modal').css('display', 'none');
    });

    $(window).on('click', function (event) {
        if ($(event.target).is('#nm-modal')) {
            $('#nm-modal').css('display', 'none');
        }
    });
}


/// Función para mostrar el formulario de añadir WMS
function showAddWmsForm() {
    if ($('#nm-wms-form').length === 0) {
        var $wmsForm = $('<div>', { id: 'nm-wms-form', class: 'nm-modal' });
        var $wmsFormContent = $('<div>', { class: 'nm-modal-content' });

        var $formTitle = $('<h3>').text('Añadir capa WMS');
        var $labelUrl = $('<label>', { for: 'nm-wms-url' }).text('URL del servicio WMS:');
        var $inputUrl = $('<input>', { type: 'text', id: 'nm-wms-url', name: 'nm-wms-url' });

        var $labelLayerName = $('<label>', { for: 'nm-wms-layer-name' }).text('Nombre de la capa WMS:');
        var $inputLayerName = $('<input>', { type: 'text', id: 'nm-wms-layer-name', name: 'nm-wms-layer-name' });

        var $addButton = $('<button>', { id: 'nm-wms-add-button' }).text('Agregar capa');
        var $cancelButton = $('<button>', { id: 'nm-wms-cancel-button' }).text('Cancelar');

        // Icono de carga oculto inicialmente
        var $loadingIcon = $('<div>', { id: 'nm-wms-loading', style: 'display:none;' }).html('<img src="' + nmMapData.plugin_url + '/includes/img/Loading_icon.gif" alt="Cargando...">');

        $wmsFormContent.append($formTitle, $labelUrl, $inputUrl, $labelLayerName, $inputLayerName, $addButton, $cancelButton, $loadingIcon);
        $wmsForm.append($wmsFormContent);

        $('#nm-main-map').append($wmsForm);

        $wmsForm.css({
            position: 'absolute',
            top: '0',
            left: '0',
            width: '100%',
            height: '100%',
            'background-color': 'rgba(0,0,0,0.5)',
            'z-index': '1000',
            display: 'flex',
            'align-items': 'center',
            'justify-content': 'center'
        });

        $wmsFormContent.css({
            'background-color': '#fff',
            padding: '20px',
            'border-radius': '5px',
            width: '300px'
        });

        $wmsForm.hide();

        $addButton.on('click', function () {
            var wmsUrl = $inputUrl.val();
            var wmsLayerName = $inputLayerName.val();

            if (wmsUrl && wmsLayerName) {
                if (!/^https?:\/\//i.test(wmsUrl)) {
                    alert('Por favor, ingrese una URL válida que comience con http:// o https://');
                    return;
                }

                if (/[^a-zA-Z0-9_:,.-]/.test(wmsLayerName)) {
                    alert('El nombre de la capa contiene caracteres no permitidos.');
                    return;
                }

                // Ocultar botón de agregar y mostrar el icono de carga
                $addButton.hide();
                $loadingIcon.show();

                // Agregar la capa WMS al mapa
                var userWmsLayer = L.tileLayer.wms(wmsUrl, {
                    layers: wmsLayerName,
                    format: 'image/png',
                    transparent: true,
                    attribution: ''
                });

                // Variable para asegurarse de que la alerta se muestre solo una vez
                var alertShown = false;

                userWmsLayer.on('tileload', function () {
                    if (!alertShown) {
                        alertShown = true; // Evitar que la alerta se muestre de nuevo
                        alert('Capa WMS cargada con éxito');
                        $loadingIcon.hide();
                        $addButton.show();
                        $wmsForm.hide();
                        $inputUrl.val('');
                        $inputLayerName.val('');
                    }
                });

                userWmsLayer.on('tileerror', function (error, tile) {
                    alert('Error al cargar la capa WMS. Por favor, verifique la URL y el nombre de la capa.');
                    // Ocultar el icono de carga y mostrar el botón de agregar nuevamente
                    $loadingIcon.hide();
                    $addButton.show();
                    map.removeLayer(userWmsLayer);
                    controlLayers.removeLayer(userWmsLayer);

                });

                userWmsLayer.addTo(map);

                overlays[wmsLayerName] = userWmsLayer;
                controlLayers.addOverlay(userWmsLayer, wmsLayerName);
            } else {
                alert('Por favor, complete todos los campos.');
            }
        });

        $cancelButton.on('click', function () {
            $wmsForm.hide();
            $inputUrl.val('');
            $inputLayerName.val('');
        });
    }

    $('#nm-wms-form').show();
}



// Función para validar si una cadena es una URL
function isValidURL(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

// Función para verificar si una URL es de un archivo (por ejemplo, si termina con una extensión de archivo)
function isFile(url) {
    var extension = getFileExtension(url);
    return extension !== '';
}

// Función para obtener la extensión del archivo de una URL
function getFileExtension(url) {
    var parsedUrl = new URL(url);
    var pathname = parsedUrl.pathname;
    var lastSegment = pathname.substring(pathname.lastIndexOf('/') + 1);
    var dotIndex = lastSegment.lastIndexOf('.');
    if (dotIndex !== -1) {
        return lastSegment.substring(dotIndex + 1);
    }
    return '';
}

// Función para verificar si una extensión es de imagen
function isImage(extension) {
    var imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];
    return imageExtensions.includes(extension);
}

================
File: public/js/public.js
================
var map;
var overlay;
// Crear objetos para las capas base y overlays
var baseLayers = {};
var overlays = {};
var controlLayers;

jQuery(document).ready(function ($) {
    if ($('#nm-main-map').length) {

        map = L.map('nm-main-map').setView([nmMapData.lat, nmMapData.lng], nmMapData.zoom);



        // Crear el contenedor de controles si aún no existe
        if ($('#nm-top-controls').length === 0) {
            $('#nm-main-map').append('<div id="nm-top-controls" class="nm-top-controls"></div>');
        }

        // Referencia al contenedor de controles
        var $topControls = $('#nm-top-controls');

        // Botón de descarga de GeoJSON
        if (nmMapData.enable_geojson_download) {
            var $downloadButton = $('<button>', {
                class: 'nm-control-button',
                title: 'Descargar GeoJSON',
                html: '<i class="fa fa-download"></i>'
            });
            $downloadButton.on('click', function (e) {
                e.stopPropagation(); // Evita que el evento se propague al mapa
                downloadGeoJson();
            });
            $topControls.append($downloadButton);
        }
        // Botón de búsqueda y campo de entrada
        if (nmMapData.enable_search) {
            var $searchContainer = $('<div>', { class: 'nm-search-container' });
            var $searchButton = $('<button>', {
                class: 'nm-control-button',
                title: 'Buscar',
                html: '<i class="fa fa-search"></i>'
            });
            $searchButton.on('click', function (e) {
                e.stopPropagation();
                toggleSearchInput();
            });
            $searchContainer.append($searchButton);

            var $searchInput = $('<input>', {
                type: 'text',
                class: 'nm-search-input',
                placeholder: 'Buscar ubicación...'
            }).hide();

            $searchInput.on('keypress', function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    performSearch($searchInput.val());
                }
            });

            $searchContainer.append($searchInput);

            $topControls.append($searchContainer);
        }

        // Botón para añadir capas WMS
        if (nmMapData.enable_user_wms) {
            var $addWmsButton = $('<button>', {
                class: 'nm-control-button',
                title: 'Añadir capa WMS',
                html: '<i class="fa fa-plus"></i>'
            });
            $addWmsButton.on('click', function (e) {
                e.stopPropagation(); // Evita que el evento se propague al mapa
                showAddWmsForm();
            });
            $topControls.append($addWmsButton);
        }

        // Asegurarse de que el contenedor del mapa tiene posición relativa
        $('#nm-main-map').css('position', 'relative');

        // Agregar las capas base
        if (Array.isArray(nmMapData.base_layers) && nmMapData.base_layers.length > 0) {

            nmMapData.base_layers.forEach(function (layer) {
                var tileLayer = L.tileLayer(layer.url, {
                    attribution: layer.attribution || ''
                    // Puedes agregar más opciones aquí
                });
                baseLayers[layer.name] = tileLayer;

            });

            // Agregar la primera capa base al mapa por defecto
            var firstBaseLayer = baseLayers[Object.keys(baseLayers)[0]];

            L.tileLayer(firstBaseLayer._url, {
                attribution: firstBaseLayer.options.attribution
            }).addTo(map);

        } else {
            // Si no hay capas base definidas, usar una por defecto
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);
        }

        // Agregar las capas overlay
        if (Array.isArray(nmMapData.overlay_layers) && nmMapData.overlay_layers.length > 0) {
            nmMapData.overlay_layers.forEach(function (layer) {

                if (layer.type === 'geojson') {
                    // Cargar la capa GeoJSON
                    overlay = L.geoJSON(null); // Inicialmente vacía
                    // Cargar los datos GeoJSON desde la URL
                    $.getJSON(layer.url, function (data) {
                        overlay.addData(data);
                    });
                } else if (layer.type === 'wms') {
                    // Agregar capa WMS
                    overlay = L.tileLayer.wms(layer.url, {
                        layers: layer.wms_layer_name, // Nombre de la capa WMS especificada
                        format: 'image/png',
                        transparent: true,
                        attribution: layer.attribution || ''
                        // Puedes agregar más opciones aquí
                    });
                }
                overlays[layer.name] = overlay;

            });
        }

        // Agregar controles de capas
        controlLayers = L.control.layers(baseLayers, overlays).addTo(map);



        // Load points via AJAX
        $.post(nmMapData.ajax_url, {
            action: 'nm_get_map_points',
            nonce: nmMapData.nonce
        }, function (response) {
            if (Array.isArray(response)) {
                L.geoJSON(response, {
                    pointToLayer: function (feature, latlng) {
                        return L.marker(latlng);
                    },
                    onEachFeature: function (feature, layer) {
                        // Agregar un evento de clic al marcador
                        layer.on('click', function () {
                            // Obtener las propiedades del feature
                            var properties = feature.properties;

                            // Clonar el objeto properties para no modificar el original
                            var propertiesToShow = Object.assign({}, properties);

                            // Remover el entry_id de las propiedades a mostrar
                            delete propertiesToShow.entry_id;



                            // Mostrar el modal con las propiedades
                            showModal(propertiesToShow);
                        });
                    }
                }).addTo(map);
            } else {
                console.error('Invalid response from server:', response);
            }

        }).fail(function (jqXHR, textStatus, errorThrown) {
            console.error('AJAX Error:', textStatus, errorThrown);
        });

    }

});
