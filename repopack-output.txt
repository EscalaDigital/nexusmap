This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-05T11:56:12.174Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
admin/class-nm-admin.php
admin/copia_admin.php
admin/css/admin.css
admin/css/entries.css
admin/js/admin.js
admin/js/entries.js
admin/NM_Ajax_Handlers.php
admin/NM_Entries.php
admin/NM_Manage_Layers.php
admin/NM_Map_Settings.php
admin/NM_Menu_Main.php
admin/views/entries-list.php
admin/views/field-templates/checkbox.php
admin/views/field-templates/date.php
admin/views/field-templates/file.php
admin/views/field-templates/header.php
admin/views/field-templates/image.php
admin/views/field-templates/map.php
admin/views/field-templates/number.php
admin/views/field-templates/radio.php
admin/views/field-templates/range.php
admin/views/field-templates/select.php
admin/views/field-templates/text.php
admin/views/field-templates/textarea.php
admin/views/field-templates/title.php
admin/views/field-templates/url.php
admin/views/form-builder.php
admin/views/manage-layers.php
admin/views/map-settings.php

================================================================
Repository Files
================================================================

================
File: admin/class-nm-admin.php
================
<?php

require_once 'NM_Menu_Main.php';
require_once 'NM_Entries.php';
require_once 'NM_Map_Settings.php';
require_once 'NM_Manage_Layers.php';
require_once 'NM_Ajax_Handlers.php';

class NM_Admin
{
    private $loader;
    private $model;

    public function __construct($loader)
    {
        $this->loader = $loader;
        $this->model = new NM_Model();

        // Cargar funcionalidades divididas
        new NM_Menu_Main($this->loader, $this->model);
        new NM_Entries($this->loader, $this->model);
        new NM_Map_Settings($this->loader);
        new NM_Manage_Layers($this->loader);
        new NM_Ajax_Handlers($this->loader, $this->model);

        // Cargar estilos y scripts en las páginas específicas del plugin
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_admin_assets');
    }

    public function enqueue_admin_assets($hook_suffix)
    {
        // Verificar que solo se carguen en las páginas de NexusMap
        $plugin_pages = ['toplevel_page_nm', 'nexusmap_page_nm-entries', 'nexusmap_page_nm_map_settings', 'nexusmap_page_nm_manage_layers'];

        if (in_array($hook_suffix, $plugin_pages)) {
            // Cargar CSS
            wp_enqueue_style('nm-admin-css', NM_PLUGIN_URL . 'admin/css/admin.css', array(), NM_VERSION);
            wp_enqueue_style('nm-entries-css', NM_PLUGIN_URL . 'admin/css/entries.css', array(), NM_VERSION);

            // Cargar CSS y JS de Leaflet (si es necesario para la página de capas o mapa)
            wp_enqueue_style('leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), null);
            wp_enqueue_script('leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), null, true);

            // Cargar scripts específicos
            wp_enqueue_script('nm-admin-js', NM_PLUGIN_URL . 'admin/js/admin.js', array('jquery', 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable'), NM_VERSION, true);
            wp_enqueue_script('nm-entries-js', NM_PLUGIN_URL . 'admin/js/entries.js', array('jquery', 'leaflet-js'), NM_VERSION, true);
            

            // Agregar variables globales para AJAX
            wp_localize_script('nm-admin-js', 'nmAdmin', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce'    => wp_create_nonce('nm_admin_nonce')
            ));
        }
    }
}

================
File: admin/copia_admin.php
================
<?php

class NM_Admin
{

    private $loader;
    private $model;

    public function __construct($loader)
    {
        $this->loader = $loader;
        $this->model = new NM_Model();

        $this->loader->add_action('admin_menu', $this, 'add_plugin_admin_menu');
        $this->loader->add_action('admin_init', $this, 'register_map_settings'); // Agregar el hook para registrar las opciones del mapa
        $this->loader->add_action('admin_enqueue_scripts', $this, 'enqueue_admin_assets');
        $this->loader->add_action('wp_ajax_nm_save_form', $this, 'save_form');
        $this->loader->add_action('wp_ajax_nm_get_field_template', $this, 'get_field_template');
        $this->loader->add_action('wp_ajax_nm_get_entries', $this, 'get_entries');
        $this->loader->add_action('wp_ajax_nm_update_entry_status', $this, 'update_entry_status');

        // Acciones para capas base
        $this->loader->add_action('admin_post_nm_add_base_layer_action', $this, 'handle_add_base_layer');
        $this->loader->add_action('admin_post_nm_delete_base_layer_action', $this, 'handle_delete_base_layer');

        // Acciones para capas overlay
        $this->loader->add_action('admin_post_nm_add_overlay_layer_action', $this, 'handle_add_overlay_layer');
        $this->loader->add_action('admin_post_nm_delete_overlay_layer_action', $this, 'handle_delete_overlay_layer');
    }

    public function add_plugin_admin_menu()
    {
        add_menu_page(
            'NexusMap',
            'NexusMap',
            'manage_options',
            'nm',
            array($this, 'display_plugin_setup_page'),
            'dashicons-location-alt',
            25
        );

        add_submenu_page(
            'nm',
            'Form Entries',
            'Entries',
            'manage_options',
            'nm-entries',
            array($this, 'display_entries_page')
        );

        // Agregar el nuevo submenú para las configuraciones del mapa
        add_submenu_page(
            'nm',
            'Map Settings',
            'Map Settings',
            'manage_options',
            'nm_map_settings',
            array($this, 'display_map_settings_page')
        );

        // Nuevo submenú para "Manage Layers"
        add_submenu_page(
            'nm',
            'Manage Layers',
            'Manage Layers',
            'manage_options',
            'nm_manage_layers',
            array($this, 'display_manage_layers_page')
        );
    }

    public function display_plugin_setup_page()
    {
        $form_data = $this->model->get_form();
        include_once 'views/form-builder.php';
    }

    public function display_entries_page()
    {
        $entries = $this->model->get_entries();
        include_once 'views/entries-list.php';
    }

    public function display_map_settings_page()
    {
        include_once 'views/map-settings.php';
    }

    public function display_manage_layers_page()
    {
        include_once 'views/manage-layers.php';
    }

    // Función para manejar la adición de capas base
    public function handle_add_base_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_base_layer', 'nm_nonce');

        // Procesar los datos del formulario
        $layer_name = sanitize_text_field($_POST['layer_name']);
        $layer_url = nm_sanitize_tile_url($_POST['layer_url']);
        $layer_attribution = sanitize_textarea_field($_POST['layer_attribution']);

        $base_layers = get_option('nm_base_layers', array());

        $base_layers[] = array(
            'name' => $layer_name,
            'url'  => $layer_url,
            'attribution' => $layer_attribution,
            // Puedes agregar más opciones aquí
        );

        update_option('nm_base_layers', $base_layers);

        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la eliminación de capas base
    public function handle_delete_base_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_base_layer_' . $index);

        $base_layers = get_option('nm_base_layers', array());
        if (isset($base_layers[$index])) {
            unset($base_layers[$index]);
            $base_layers = array_values($base_layers); // Reindexar el array
            update_option('nm_base_layers', $base_layers);
        }

        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la adición de capas overlay
    public function handle_add_overlay_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_overlay_layer', 'nm_nonce');

        // Procesar los datos del formulario
        $overlay_name = sanitize_text_field($_POST['overlay_name']);
        $overlay_type = sanitize_text_field($_POST['overlay_type']);
        $overlay_url = nm_sanitize_tile_url($_POST['overlay_url']);
        $wms_layer_name = isset($_POST['wms_layer_name']) ? sanitize_text_field($_POST['wms_layer_name']) : '';

        $overlay_layers = get_option('nm_overlay_layers', array());

        $overlay_layers[] = array(
            'name' => $overlay_name,
            'type' => $overlay_type,
            'url'  => $overlay_url,
            'wms_layer_name' => $wms_layer_name,
            // Puedes agregar más opciones aquí
        );

        update_option('nm_overlay_layers', $overlay_layers);

        // Clear the WordPress cache
        wp_cache_flush();

        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Función para manejar la eliminación de capas overlay
    public function handle_delete_overlay_layer()
    {
        // Verificar permisos y nonce
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_overlay_layer_' . $index);

        $overlay_layers = get_option('nm_overlay_layers', array());
        if (isset($overlay_layers[$index])) {
            unset($overlay_layers[$index]);
            $overlay_layers = array_values($overlay_layers); // Reindexar el array
            update_option('nm_overlay_layers', $overlay_layers);
        }
        // Clear the WordPress cache
        wp_cache_flush();
        // Redirigir de vuelta a la página de gestión de capas
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    public function enqueue_admin_assets()
    {
        wp_enqueue_style('nm-admin-css', NM_PLUGIN_URL . 'admin/css/admin.css', array(), NM_VERSION);
        wp_enqueue_style('nm-entries-css', NM_PLUGIN_URL . 'admin/css/entries.css', array(), NM_VERSION);

        // Encolar CSS y JS de Leaflet
        wp_enqueue_style('leaflet-css', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css', array(), null);
        wp_enqueue_script('leaflet-js', 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js', array(), null, true);



        wp_enqueue_script('nm-admin-js', NM_PLUGIN_URL . 'admin/js/admin.js', array('jquery', 'jquery-ui-sortable', 'jquery-ui-draggable', 'jquery-ui-droppable'), NM_VERSION, true);
        wp_enqueue_script('nm-entries-js', NM_PLUGIN_URL . 'admin/js/entries.js', array('jquery', 'leaflet-js'), NM_VERSION, true);
        wp_localize_script('nm-admin-js', 'nmAdmin', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce'    => wp_create_nonce('nm_admin_nonce')
        ));
    }

    public function save_form()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $form_data = $_POST['form_data'];
        $this->model->save_form($form_data);
        wp_send_json_success('Form saved successfully');
    }

    public function get_field_template()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $field_type = sanitize_text_field($_POST['field_type']);

        ob_start();
        include 'views/field-templates/' . $field_type . '.php';
        $field_html = ob_get_clean();

        wp_send_json_success($field_html);
    }

    public function get_entries()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $entries = $this->model->get_entries();
        wp_send_json_success($entries);
    }

    public function update_entry_status()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $entry_id = intval($_POST['entry_id']);
        $status = sanitize_text_field($_POST['status']);
        $this->model->update_entry_status($entry_id, $status);
        wp_send_json_success('Entry status updated');
    }


    public function register_map_settings()
    {
        register_setting('nm_map_settings_group', 'nm_enable_geojson_download'); // opción para habilitar la descarga de GeoJSON
        register_setting('nm_map_settings_group', 'nm_enable_search'); // opción para habilitar la búsqueda
        register_setting('nm_map_settings_group', 'nm_enable_user_wms'); // Opción para habilitar que el usuario pueda agregar WMS

        add_settings_section(
            'nm_map_settings_section',
            __('Map Options', 'nexusmap'),
            null,
            'nm_map_settings'
        );

        add_settings_field(
            'nm_enable_geojson_download',
            __('Enable GeoJSON Download', 'nexusmap'),
            array($this, 'render_geojson_download_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_search',
            __('Enable Map Search', 'nexusmap'),
            array($this, 'render_map_search_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
        // Agregar el campo add user wms
        add_settings_field(
            'nm_enable_user_wms',
            __('Enable User WMS Layers', 'nexusmap'),
            array($this, 'render_user_wms_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
    }

    //funcion para renderizar el campo de descarga de GeoJSON
    public function render_geojson_download_field()
    {
        $option = get_option('nm_enable_geojson_download', false);
?>
        <input type="checkbox" name="nm_enable_geojson_download" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_geojson_download"><?php esc_html_e('Enable the option to download map data as GeoJSON.', 'nexusmap'); ?></label>
    <?php
    }

    //funcion para renderizar el campo de búsqueda en el mapa
    public function render_map_search_field()
    {
        $option = get_option('nm_enable_search', false);
    ?>
        <input type="checkbox" name="nm_enable_search" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_search"><?php esc_html_e('Enable the search functionality on the map.', 'nexusmap'); ?></label>
    <?php
    }

    public function render_user_wms_field()
    {
        $option = get_option('nm_enable_user_wms', false);
    ?>
        <input type="checkbox" name="nm_enable_user_wms" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_user_wms"><?php esc_html_e('Allow users to add WMS layers to the map.', 'nexusmap'); ?></label>
<?php
    }
}

================
File: admin/css/admin.css
================
#nm-form-builder {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 8px;
}

#nm-form-elements {
    width: 30%;
    max-width: 300px;
}

#nm-form-elements h2 {
    text-align: center;
    margin-bottom: 20px;
}

#nm-form-elements ul {
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

#nm-form-elements li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px 20px;
    cursor: grab;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
}

#nm-form-elements li:hover {
    transform: scale(1.05);
}

#nm-form-elements li:active {
    cursor: grabbing;
    transform: scale(1.05);
}

#nm-form-preview {
    width: 65%;
    padding: 20px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
#nm-custom-form .nm-form-field {
    padding: 10px;
    border: 1px solid #ddd;
    margin-bottom: 5px;
    position: relative;
}

#nm-custom-form-a .nm-form-field {
    padding: 10px;
    border: 1px solid #ddd;
    margin-bottom: 5px;
    position: relative;
}

#nm-custom-form-b .nm-form-field {
    padding: 10px;
    border: 1px solid #ddd;
    margin-bottom: 5px;
    position: relative;
}

.nm-remove-field {
    position: absolute;
    top: 5px;
    right: 5px;
    color: red;
    cursor: pointer;
}


/* Estilos generales para los campos del formulario */
.nm-form-field {
    margin-bottom: 20px;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
}

/* Etiquetas de los campos */
.nm-form-field label {
    display: block;
    margin-bottom: 10px;
    font-weight: bold;
    color: #333;
}

/* Entradas de texto y otros campos del formulario */
.nm-form-field input[type="text"],
.nm-form-field input[type="url"],
.nm-form-field input[type="number"],
.nm-form-field input[type="file"],
.nm-form-field input[type="range"],
.nm-form-field textarea {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

/* Botones de acción dentro del formulario */
.nm-form-field button,
.nm-remove-field,
.add-radio-option,
.add-checkbox-option,
.add-select-option {
    display: inline-block;
    padding: 8px 12px;
    background-color: #0073aa;
    color: #fff;
    text-align: center;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.nm-remove-field:hover,
.add-radio-option:hover,
.add-checkbox-option:hover,
.add-select-option:hover {
    background-color: #005177;
}

/* Opciones dinámicas para radio, checkbox y select */
.radio-option,
.checkbox-option,
.select-option {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.radio-option input[type="text"],
.checkbox-option input[type="text"],
.select-option input[type="text"] {
    margin-right: 10px;
    flex-grow: 1;
}

/* Botón para eliminar opciones dinámicas */
.remove-option {
    color: #d9534f;
    cursor: pointer;
    font-size: 12px;
}

.remove-option:hover {
    color: #c9302c;
}

/* Estilos para los mensajes de error */
.error-message {
    color: #d9534f;
    font-size: 14px;
}

/* Estilos específicos para el mapa */
#nm-map-canvas {
    width: 100%;
    height: 300px;
    border: 1px solid #ccc;
    margin-top: 10px;
}

/* Estilo para el área donde se arrastran y sueltan los campos */
#nm-custom-form, #tab-a , #tab-b {
    min-height: 200px;
    border: 2px dashed #0073aa;
    padding: 10px;
    background-color: #f0f8ff;
    border-radius: 4px;
}

/* Estilo para los elementos que se pueden arrastrar */
#nm-form-elements li {
    list-style: none;
    margin-bottom: 10px;
    padding: 10px;
    background-color: #e9ecef;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: move;
}

#nm-form-elements li:hover {
    background-color: #dfe3e7;
}

/* Contenedor de tabs */
   /* Estilo para la navegación de las pestañas */
   #tabsforms .tab-navigation {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0 0 20px 0;
    background-color: #f1f1f1;
    border-radius: 5px;
    overflow: hidden;
}

#tabsforms .tab-navigation li {
    flex: 1;
}

#tabsforms .tab-navigation li a {
    display: block;
    padding: 15px;
    text-align: center;
    text-decoration: none;
    color: #555;
    font-weight: bold;
    background-color: #e0e0e0;
    transition: background-color 0.3s, color 0.3s;
}

#tabsforms .tab-navigation li a:hover {
    background-color: #d5d5d5;
    color: #000;
}

#tabsforms .tab-navigation li.ui-tabs-active a {
    background-color: #fff;
    color: #000;
    cursor: default;
}

/* Estilo para el contenido de las pestañas */
#tabsforms .ui-tabs-panel {
    padding: 20px;
    background-color: #fff;
    border: 1px solid #ccc;
}

/* Transición suave entre pestañas */
#tabsforms .ui-tabs-panel {
    display: none;
}

#tabsforms .ui-tabs-panel.ui-tabs-active {
    display: block;
}

================
File: admin/css/entries.css
================
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fff;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.property-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

.property-item strong {
    flex: 0 0 150px;
    font-weight: bold;
    color: #333;
}

.property-item span {
    flex: 1;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    color: #555;
}

.property-item img {
    max-width: 200px;
    height: auto;
    margin-left: 15px;
}

.property-item a {
    color: #0073aa;
    text-decoration: none;
}

.property-item a:hover {
    text-decoration: underline;
}

================
File: admin/js/admin.js
================
jQuery(document).ready(function ($) {
    // Toggle visibility of A/B options when checkbox is changed
    $('#nm-ab-option').change(function () {
        if ($(this).is(':checked')) {
            $('#tabsforms').show();
            $('#formunique').hide();
            // Initialize tabs if not already initialized
            if (!$('#tabsforms').hasClass('ui-tabs')) {
                $('#tabsforms').tabs();
            }
        } else {
            $('#tabsforms').hide();
            $('#formunique').show();
            // Destroy tabs if initialized
            if ($('#tabsforms').hasClass('ui-tabs')) {
                $('#tabsforms').tabs('destroy');
            }
        }

        // Save the A/B option setting via AJAX
        $.post(nmAdmin.ajax_url, {
            action: 'nm_save_ab_option',
            ab_option: $(this).is(':checked') ? 1 : 0,
            nonce: nmAdmin.nonce
        }, function (response) {
            if (!response.success) {
                alert('Error al guardar la opción A/B.');
            }
        });
    });

    // Handle click on the save option texts button
    $('#nm-save-option-texts').on('click', function (e) {
        e.preventDefault();
        var optionAText = $('#nm-option-a-text').val();
        var optionBText = $('#nm-option-b-text').val();

        // Send AJAX request to save the option texts
        $.post(nmAdmin.ajax_url, {
            action: 'nm_save_option_texts',
            option_a_text: optionAText,
            option_b_text: optionBText,
            nonce: nmAdmin.nonce
        }, function (response) {
            if (response.success) {
                alert('Option texts saved successfully.');
                // Update the tab labels if necessary
                $('#tabsforms ul li a[href="#tab-a"]').text(optionAText);
                $('#tabsforms ul li a[href="#tab-b"]').text(optionBText);
            } else {
                alert('Error saving option texts.');
            }
        });
    });

    // Drag and Drop Fields
    $('#nm-form-elements li').draggable({
        helper: 'clone',
        revert: 'invalid'
    });

    $('.nm-form-droppable').droppable({
        accept: '#nm-form-elements li',
        drop: function (event, ui) {
            var fieldType = ui.draggable.data('type');
            var $thisForm = $(this);
            // AJAX call to get field template
            $.post(nmAdmin.ajax_url, {
                action: 'nm_get_field_template',
                field_type: fieldType,
                nonce: nmAdmin.nonce
            }, function (response) {
                if (response.success) {
                    $thisForm.append(response.data);
                } else {
                    alert('Error loading field template.');
                }
            });
        }
    });

    // Make form fields sortable
    $('.nm-form-droppable').sortable();

    // Remove Field
    $(document).on('click', '.nm-remove-field', function () {
        $(this).closest('.nm-form-field').remove();
    });

    // Añadir nueva opción de radio
    $(document).on('click', '.add-radio-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.radio-options');
        var newOption = '<div class="radio-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Añadir nueva opción de checkbox
    $(document).on('click', '.add-checkbox-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.checkbox-options');
        var newOption = '<div class="checkbox-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Añadir nueva opción de select
    $(document).on('click', '.add-select-option', function () {
        var $field = $(this).closest('.nm-form-field');
        var $optionsContainer = $field.find('.select-options');
        var newOption = '<div class="select-option">' +
            '<input type="text" class="option-value field-option" placeholder="Option Value">' +
            '<span class="remove-option">Remove</span>' +
            '</div>';
        $optionsContainer.append(newOption);
    });

    // Eliminar opción de radio
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.radio-option').remove();
    });

    // Eliminar opción de checkbox
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.checkbox-option').remove();
    });

    // Eliminar opción de select
    $(document).on('click', '.remove-option', function () {
        $(this).closest('.select-option').remove();
    });

    // Modificar la función de guardar formulario para incluir checkboxes
    // Function to collect form fields and send to server
    function saveForm(formSelector, formType) {
        var formFields = [];
        $(formSelector + ' .nm-form-field').each(function () {
            var fieldType = $(this).data('type');
            var fieldLabel = $(this).find('.field-label').val() || '';
            var fieldName = $(this).find('.field-name').val() || '';
            var fieldOptions = [];

            // Collect options if the field has them
            if (fieldType === 'select' || fieldType === 'checkbox' || fieldType === 'radio') {
                $(this).find('.field-option').each(function () {
                    var optionValue = $(this).val();
                    if (optionValue) {
                        fieldOptions.push(optionValue);
                    }
                });
            }

            var fieldData = {
                type: fieldType,
                label: fieldLabel,
                name: fieldName
            };

            if (fieldOptions.length > 0) {
                fieldData.options = fieldOptions;
            }

            formFields.push(fieldData);
        });

        // Send formFields to the server via AJAX
        $.post(nmAdmin.ajax_url, {
            action: 'nm_save_form',
            form_type: formType,
            form_data: { fields: formFields },
            nonce: nmAdmin.nonce
        }, function (response) {
            if (response.success) {
                alert('Form saved successfully.');
            } else {
                alert('Error saving form.');
            }
        });
    }

    // Function to validate if all fields are filled
    function validateForm(formId) {
        let isValid = true;
        $(`${formId} .nm-form-field input, ${formId} .nm-form-field select, ${formId} .nm-form-field textarea`).each(function () {
            if ($(this).val() === "") {
                isValid = false;
                $(this).css('border', '1px solid red'); // Highlight empty fields
            } else {
                $(this).css('border', ''); // Reset field style if filled
            }
        });

        if (!isValid) {
            alert("Por favor, completa todos los campos antes de guardar.");
        }
        return isValid;
    }

    // Function to save form after validation
    function compruebaysalva(formId, formType) {
        // Only proceed if validation is successful
        if (validateForm(formId)) {
            saveForm(formId, formType);
        }
    }

    // Event listeners to save each form
    // Save Form A
    $('#nm-save-form-a').click(function () {
        compruebaysalva('#nm-custom-form-a', 1);
    });
    // Save Form B
    $('#nm-save-form-b').click(function () {
        compruebaysalva('#nm-custom-form-b', 2);
    });
    //  Save Unique Form
    $('#nm-save-form').click(function () {
        compruebaysalva('#nm-custom-form', 0);
    });

    // Entries Page Actions
    $('.approve-entry').click(function () {
        var entryId = $(this).data('id');
        updateEntryStatus(entryId, 'approved');
    });

    $('.reject-entry').click(function () {
        var entryId = $(this).data('id');
        updateEntryStatus(entryId, 'rejected');
    });

    function updateEntryStatus(entryId, status) {
        $.post(nmAdmin.ajax_url, {
            action: 'nm_update_entry_status',
            entry_id: entryId,
            status: status,
            nonce: nmAdmin.nonce
        }, function (response) {
            if (response.success) {
                location.reload();
            } else {
                alert('Error updating entry status.');
            }
        });
    }
});

================
File: admin/js/entries.js
================
jQuery(document).ready(function ($) {
    var map;  // Definir el mapa como una variable global

    // Función para comprobar si una cadena es una URL
    function isUrl(string) {

        try {
            new URL(string);

            return true;
        } catch (_) {
            return false;
        }
    }

    // Función para determinar si una URL es una imagen o un PDF
    function getFileType(url) {
        var extension = url.split('.').pop().toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].includes(extension)) {
            return 'image';
        } else if (extension === 'pdf') {
            return 'pdf';
        }
        return null;
    }

    // Cuando se hace clic en el botón "Ver Datos"
    $('.view-data').on('click', function () {
        var jsonData = $(this).data('json');  // Obtiene el JSON deserializado desde PHP


        // Aquí accedemos a los datos específicos del objeto JSON
        var mapData = jsonData.map_data;  // Obtiene la cadena JSON escapada de la base de datos

        // Decodifica la cadena JSON escapada antes de parsearla
        var decodedMapData = decodeEscapedJsonString(mapData);

        // Intenta analizar el JSON decodificado
        try {
            var feature = JSON.parse(decodedMapData)[0];  // Toma el primer elemento del array de features
        } catch (error) {
            console.error('Error al analizar el JSON: ', error);
            return;
        }

        var geometry = feature.geometry;  // Extrae la geometría del feature
        var properties = feature.properties;  // Extrae las propiedades del feature

        // Muestra el modal
        $('#dataModal').show();

        // Si el mapa ya ha sido inicializado, eliminamos el mapa anterior
        if (map) {
            map.remove();
        }

        // Cargar el mapa de Leaflet dentro del modal
        setTimeout(function () {  // Usar un timeout para asegurarnos de que el modal se haya mostrado
            map = L.map('map').setView([0, 0], 2);  // Inicializa el mapa con una vista global

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 18,
            }).addTo(map);

         
                  function addGeometryToMap(geometry) {
                console.log('Processing geometry type:', geometry.type);
                var type = geometry.type.toLowerCase();
                
                if (type === 'point') {
                    var latLng = [geometry.coordinates[1], geometry.coordinates[0]];
                    console.log('Adding Point:', latLng);
                    L.marker(latLng).addTo(map);
                    bounds.extend(latLng);
                } else if (type === 'polygon' || type === 'multipolygon') {
                    console.log('Adding Polygon:', geometry.coordinates);
                    var latLngs;
                
                    if (type === 'polygon') {
                        latLngs = geometry.coordinates[0].map(function (coord) {
                            return [coord[1], coord[0]];
                        });
                    } else if (type === 'multipolygon') {
                        latLngs = geometry.coordinates.map(function (polygon) {
                            return polygon[0].map(function (coord) {
                                return [coord[1], coord[0]];
                            });
                        }).flat();
                    }
                
                    console.log('Polygon LatLngs:', latLngs);
                    L.polygon(latLngs, {
                        color: '#237CC9',
                        fillColor: '#237CC9',
                        fillOpacity: 0.5
                    }).addTo(map);
                    latLngs.forEach(function(latLng) {
                        bounds.extend(latLng);
                    });
                } else if (geometry.type === 'GeometryCollection') {
                    console.log('Adding GeometryCollection:', geometry.geometries);
                    geometry.geometries.forEach(function (geom) {
                        addGeometryToMap(geom);
                    });
                } else {
                    console.log('Unknown geometry type:', geometry.type);
                }
            }
            
            var bounds = L.latLngBounds();
            
            addGeometryToMap(geometry);
            
            if (bounds.isValid()) {
                map.fitBounds(bounds);
            }
            
            // Refresca el tamaño del mapa después de abrir el modal
            map.invalidateSize();
        
        }, 250);  // Retraso breve para asegurarse de que el modal esté visible

        // Mostrar el resto de las propiedades formateadas en el modal
        var propertyHtml = '';

        $.each(properties, function (key, value) {
            var cleanKey = key.replace('nm_', '');  // Elimina "nm_" del inicio del key
            var content = value;
         
            if (isUrl(content)) {
                var fileType = getFileType(content);
                if (fileType === 'image') {
                    content = '<img src="' + content + '" alt="' + cleanKey + '">';
                } else if (fileType === 'pdf') {
                    content = '<a href="' + content + '" target="_blank">Ver PDF</a>';
                } else {
                    content = '<a href="' + content + '" target="_blank">' + content + '</a>';
                }
            }

            // Construye la fila con el título en negrita y el contenido a la derecha
            propertyHtml += '<div class="property-item">';
            propertyHtml += '<strong>' + cleanKey + ':</strong>';
            propertyHtml += '<span>' + content + '</span>';
            propertyHtml += '</div>';
        });

        // Inserta el contenido en el modal
        $('#jsonData').html(propertyHtml);
    });

    // Cerrar el modal cuando se hace clic en el botón de cerrar
    $('.close').on('click', function () {
        $('#dataModal').hide();
    });
});



function decodeEscapedJsonString(escapedString) {
    // Reemplaza todas las secuencias de escape que están duplicadas para que sea un JSON válido
    return escapedString
        .replace(/\\"/g, '"')  // Reemplaza las comillas escapadas
        .replace(/\\n/g, '')   // Remueve los saltos de línea escapados
        .replace(/\\r/g, '')   // Remueve los retornos de carro escapados
        .replace(/\\\\/g, '\\');  // Reemplaza las barras invertidas dobles con una sola barra invertida
}

================
File: admin/NM_Ajax_Handlers.php
================
<?php

class NM_Ajax_Handlers
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;

        // Registro de acciones AJAX
        $this->loader->add_action('wp_ajax_nm_save_form', $this, 'save_form');
        $this->loader->add_action('wp_ajax_nm_get_field_template', $this, 'get_field_template');
        $this->loader->add_action('wp_ajax_nm_get_entries', $this, 'get_entries');
        $this->loader->add_action('wp_ajax_nm_update_entry_status', $this, 'update_entry_status');
        $this->loader->add_action('wp_ajax_nm_save_ab_option', $this, 'save_ab_option');
        $this->loader->add_action('wp_ajax_nm_save_option_texts', $this, 'save_option_texts');
        $this->loader->add_action('wp_ajax_nm_get_form', $this, 'get_form_html');
    }
    // Compare this snippet from admin/NM_Ajax_Handlers.php:
    public function save_ab_option()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');
        $ab_option = isset($_POST['ab_option']) && $_POST['ab_option'] == 1 ? 1 : 0;
        update_option('nm_ab_option_enabled', $ab_option);
        wp_send_json_success();
    }
    // with this snippet from admin/NM_Ajax_Handlers.php:
    public function save_option_texts()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $option_a_text = isset($_POST['option_a_text']) ? sanitize_text_field($_POST['option_a_text']) : '';
        $option_b_text = isset($_POST['option_b_text']) ? sanitize_text_field($_POST['option_b_text']) : '';

        if ($option_a_text && $option_b_text) {
            update_option('nm_option_a_text', $option_a_text);
            update_option('nm_option_b_text', $option_b_text);
            wp_send_json_success();
        } else {
            wp_send_json_error(__('Option texts are missing', 'nexusmap'));
        }
    }

    public function save_form() {
        check_ajax_referer('nm_admin_nonce', 'nonce');
    
        $form_data = isset($_POST['form_data']) ? $_POST['form_data'] : '';
        $form_type = isset($_POST['form_type']) ? intval($_POST['form_type']) : 0;
    
        if ($form_data) {
            $this->model->save_form($form_data, $form_type);
            wp_send_json_success(__('Form saved successfully', 'nexusmap'));
        } else {
            wp_send_json_error(__('Form data is missing', 'nexusmap'));
        }
    }
    // Función para obtener la plantilla de un campo específico
    public function get_field_template()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $field_type = sanitize_text_field($_POST['field_type']);
        ob_start();

        if ($field_type) {
            include 'views/field-templates/' . $field_type . '.php';
            $field_html = ob_get_clean();
            wp_send_json_success($field_html);
        } else {
            wp_send_json_error(__('Field type is missing', 'nexusmap'));
        }
    }

    // Función para obtener entradas
    public function get_entries()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $entries = $this->model->get_entries();
        if ($entries) {
            wp_send_json_success($entries);
        } else {
            wp_send_json_error(__('No entries found', 'nexusmap'));
        }
    }

    // Función para actualizar el estado de una entrada
    public function update_entry_status()
    {
        check_ajax_referer('nm_admin_nonce', 'nonce');

        $entry_id = intval($_POST['entry_id']);
        $status = sanitize_text_field($_POST['status']);

        if ($entry_id && $status) {
            $this->model->update_entry_status($entry_id, $status);
            wp_send_json_success(__('Entry status updated', 'nexusmap'));
        } else {
            wp_send_json_error(__('Entry ID or status is missing', 'nexusmap'));
        }
    }
}

================
File: admin/NM_Entries.php
================
<?php

class NM_Entries
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;
        $this->loader->add_action('admin_menu', $this, 'add_entries_submenu');
    }

    public function add_entries_submenu()
    {
        add_submenu_page('nm', 'Form Entries', 'Entries', 'manage_options', 'nm-entries', array($this, 'display_entries_page'));
    }

    public function display_entries_page()
    {
        $entries = $this->model->get_entries();
        include_once 'views/entries-list.php';
    }
}

================
File: admin/NM_Manage_Layers.php
================
<?php

class NM_Manage_Layers
{
    private $loader;

    public function __construct($loader)
    {
        $this->loader = $loader;
        
        // Registro de acciones de menú y de manejo de capas
        $this->loader->add_action('admin_menu', $this, 'add_layers_submenu');
        $this->loader->add_action('admin_post_nm_add_base_layer_action', $this, 'handle_add_base_layer');
        $this->loader->add_action('admin_post_nm_delete_base_layer_action', $this, 'handle_delete_base_layer');
        $this->loader->add_action('admin_post_nm_add_overlay_layer_action', $this, 'handle_add_overlay_layer');
        $this->loader->add_action('admin_post_nm_delete_overlay_layer_action', $this, 'handle_delete_overlay_layer');
    }

    // Añadir submenú para gestionar capas
    public function add_layers_submenu()
    {
        add_submenu_page(
            'nm',
            __('Manage Layers', 'nexusmap'),
            __('Manage Layers', 'nexusmap'),
            'manage_options',
            'nm_manage_layers',
            array($this, 'display_manage_layers_page')
        );
    }

    // Mostrar la página de gestión de capas
    public function display_manage_layers_page()
    {
        include_once 'views/manage-layers.php';
    }

    // Manejar la adición de capas base
    public function handle_add_base_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_base_layer', 'nm_nonce');

        $layer_name = sanitize_text_field($_POST['layer_name']);
        $layer_url = nm_sanitize_tile_url($_POST['layer_url']);
        $layer_attribution = sanitize_textarea_field($_POST['layer_attribution']);

        $base_layers = get_option('nm_base_layers', array());

        $base_layers[] = array(
            'name' => $layer_name,
            'url'  => $layer_url,
            'attribution' => $layer_attribution,
        );

        update_option('nm_base_layers', $base_layers);
        wp_cache_flush();

        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la eliminación de capas base
    public function handle_delete_base_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_base_layer_' . $index);

        $base_layers = get_option('nm_base_layers', array());
        if (isset($base_layers[$index])) {
            unset($base_layers[$index]);
            $base_layers = array_values($base_layers);
            update_option('nm_base_layers', $base_layers);
        }

        wp_cache_flush();
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la adición de capas overlay
    public function handle_add_overlay_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        check_admin_referer('nm_add_overlay_layer', 'nm_nonce');

        $overlay_name = sanitize_text_field($_POST['overlay_name']);
        $overlay_type = sanitize_text_field($_POST['overlay_type']);
        $overlay_url = nm_sanitize_tile_url($_POST['overlay_url']);
        $wms_layer_name = isset($_POST['wms_layer_name']) ? sanitize_text_field($_POST['wms_layer_name']) : '';

        $overlay_layers = get_option('nm_overlay_layers', array());

        $overlay_layers[] = array(
            'name' => $overlay_name,
            'type' => $overlay_type,
            'url'  => $overlay_url,
            'wms_layer_name' => $wms_layer_name,
        );

        update_option('nm_overlay_layers', $overlay_layers);
        wp_cache_flush();

        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }

    // Manejar la eliminación de capas overlay
    public function handle_delete_overlay_layer()
    {
        if (!current_user_can('manage_options')) {
            wp_die(__('You are not allowed to access this page.', 'nexusmap'));
        }

        $index = isset($_GET['index']) ? intval($_GET['index']) : -1;
        check_admin_referer('nm_delete_overlay_layer_' . $index);

        $overlay_layers = get_option('nm_overlay_layers', array());
        if (isset($overlay_layers[$index])) {
            unset($overlay_layers[$index]);
            $overlay_layers = array_values($overlay_layers);
            update_option('nm_overlay_layers', $overlay_layers);
        }

        wp_cache_flush();
        wp_redirect(admin_url('admin.php?page=nm_manage_layers'));
        exit;
    }
}

================
File: admin/NM_Map_Settings.php
================
<?php

class NM_Map_Settings
{
    private $loader;

    public function __construct($loader)
    {
        $this->loader = $loader;

        // Registro de acciones para el submenú y la configuración del mapa
        $this->loader->add_action('admin_menu', $this, 'add_map_settings_submenu');
        $this->loader->add_action('admin_init', $this, 'register_map_settings');
    }

    // Función para añadir el submenú de configuración del mapa en el panel de administración
    public function add_map_settings_submenu()
    {
        add_submenu_page(
            'nm',
            __('Map Settings', 'nexusmap'),
            __('Map Settings', 'nexusmap'),
            'manage_options',
            'nm_map_settings',
            array($this, 'display_map_settings_page')
        );
    }

    // Función para mostrar la página de configuración del mapa
    public function display_map_settings_page()
    {
        ?>
        <div class="wrap">
            <h1><?php esc_html_e('Map Settings', 'nexusmap'); ?></h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('nm_map_settings_group');
                do_settings_sections('nm_map_settings');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    // Función para registrar las configuraciones del mapa
    public function register_map_settings()
    {
        register_setting('nm_map_settings_group', 'nm_enable_geojson_download'); // Opción para habilitar la descarga de GeoJSON
        register_setting('nm_map_settings_group', 'nm_enable_search'); // Opción para habilitar la búsqueda en el mapa
        register_setting('nm_map_settings_group', 'nm_enable_user_wms'); // Opción para permitir al usuario agregar capas WMS

        add_settings_section(
            'nm_map_settings_section',
            __('Map Options', 'nexusmap'),
            null,
            'nm_map_settings'
        );

        add_settings_field(
            'nm_enable_geojson_download',
            __('Enable GeoJSON Download', 'nexusmap'),
            array($this, 'render_geojson_download_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_search',
            __('Enable Map Search', 'nexusmap'),
            array($this, 'render_map_search_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );

        add_settings_field(
            'nm_enable_user_wms',
            __('Enable User WMS Layers', 'nexusmap'),
            array($this, 'render_user_wms_field'),
            'nm_map_settings',
            'nm_map_settings_section'
        );
    }

    // Función para renderizar el campo de descarga de GeoJSON
    public function render_geojson_download_field()
    {
        $option = get_option('nm_enable_geojson_download', false);
        ?>
        <input type="checkbox" name="nm_enable_geojson_download" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_geojson_download"><?php esc_html_e('Enable the option to download map data as GeoJSON.', 'nexusmap'); ?></label>
        <?php
    }

    // Función para renderizar el campo de búsqueda en el mapa
    public function render_map_search_field()
    {
        $option = get_option('nm_enable_search', false);
        ?>
        <input type="checkbox" name="nm_enable_search" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_search"><?php esc_html_e('Enable the search functionality on the map.', 'nexusmap'); ?></label>
        <?php
    }

    // Función para renderizar el campo que permite al usuario agregar capas WMS
    public function render_user_wms_field()
    {
        $option = get_option('nm_enable_user_wms', false);
        ?>
        <input type="checkbox" name="nm_enable_user_wms" value="1" <?php checked(1, $option); ?> />
        <label for="nm_enable_user_wms"><?php esc_html_e('Allow users to add WMS layers to the map.', 'nexusmap'); ?></label>
        <?php
    }
}

================
File: admin/NM_Menu_Main.php
================
<?php

class NM_Menu_Main
{
    private $loader;
    private $model;

    public function __construct($loader, $model)
    {
        $this->loader = $loader;
        $this->model = $model;
        $this->loader->add_action('admin_menu', $this, 'add_plugin_admin_menu');
        $this->loader->add_action('admin_footer', $this, 'remove_wp_version_footer_conditionally');
    }

    public function add_plugin_admin_menu()
    {
        add_menu_page('NexusMap', 'NexusMap', 'manage_options', 'nm', array($this, 'display_plugin_setup_page'), 'dashicons-location-alt', 25);
    }

    public function display_plugin_setup_page()
    {
          // Retrieve the A/B option from wp_options
        // If A/B option is enabled, retrieve forms A and B from your custom table
        $form_data_a = $this->model->get_form(1); // form_type = 1
        $form_data_b = $this->model->get_form(2); // form_type = 2
          // If A/B option is not enabled, retrieve the single form
        $form_data = $this->model->get_form(0); // form_type = 0

        include_once 'views/form-builder.php';
    }

    public function remove_wp_version_footer_conditionally()
    {
        $screen = get_current_screen();
        if ($screen->id === 'toplevel_page_nm') { // Reemplaza 'toplevel_page_nm' con el slug de tu página
            echo '<style>
                #wpfooter {
                    display: none !important;
                }
            </style>';
        }
    }
}

================
File: admin/views/entries-list.php
================
<div class="wrap">
    <h1>Form Entries</h1>
    <table class="wp-list-table widefat fixed striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>User</th>
                <th>Data</th>
                <th>Status</th>
                <th>Date Submitted</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($entries as $entry): ?>
                <tr>
                    <td><?php echo esc_html($entry->id); ?></td>
                    <td><?php echo esc_html(get_userdata($entry->user_id)->display_name); ?></td>
                
                    <td>
                        <button class="button view-data"
                            data-id="<?php echo esc_attr($entry->id); ?>"
                            data-json='<?php echo wp_json_encode(maybe_unserialize($entry->entry_data)); ?>'>
                            View data
                        </button>
                    </td>
                    <td><?php echo esc_html($entry->status); ?></td>
                    <td><?php echo esc_html($entry->date_submitted); ?></td>
                    <td>
                        <button class="button approve-entry" data-id="<?php echo esc_attr($entry->id); ?>">Approve</button>
                        <button class="button reject-entry" data-id="<?php echo esc_attr($entry->id); ?>">Reject</button>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
</div>

<div id="dataModal" class="modal" style="display:none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div id="map" style="height: 400px;"></div>
        <pre id="jsonData"></pre>
    </div>
</div>

================
File: admin/views/field-templates/checkbox.php
================
<div class="nm-form-field" data-type="checkbox">
    <label>Checkbox Group</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <div class="checkbox-options">
        <?php
        if ( isset( $field['options'] ) && is_array( $field['options'] ) ) {
            foreach ( $field['options'] as $option ) {
                ?>
                <div class="checkbox-option">
                    <input type="text" class="option-value field-option" placeholder="Option Value" value="<?php echo esc_attr( $option ); ?>">
                    <span class="remove-option">Remove</span>
                </div>
                <?php
            }
        } else {
            // Provide an empty option if none exist
            ?>
            <div class="checkbox-option">
                <input type="text" class="option-value field-option" placeholder="Option Value">
                <span class="remove-option">Remove</span>
            </div>
            <?php
        }
        ?>
    </div>
    <button type="button" class="add-checkbox-option">Add Checkbox Option</button>
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/date.php
================
<div class="nm-form-field" data-type="date">
    <label>Date Picker</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/file.php
================
<div class="nm-form-field" data-type="file">
    <label>File</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/header.php
================
<div class="nm-form-field" data-type="header">
    <input type="text" class="field-label" placeholder="Header Text" value="<?php echo esc_attr( $field_label ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/image.php
================
<div class="nm-form-field" data-type="image">
    <label>Image</label>
    <input type="file" name="image_field[]" accept="image/*">
    <input type="text" class="field-label" placeholder="Field Label">
    <input type="text" class="field-name" placeholder="Field Name">
    <span class="nm-remove-field">Remove</span>
</div>

================
File: admin/views/field-templates/map.php
================
<div id="mapabase" class="nm-form-field" data-type="map">
            <label>Mapa</label>
            <div id="nm-map-canvas"></div>
        </div>

================
File: admin/views/field-templates/number.php
================
<div class="nm-form-field" data-type="number">
    <label>Number Field</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/radio.php
================
<div class="nm-form-field" data-type="radio">
    <label>Radio Group</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <div class="radio-options">
        <?php
        if ( isset( $field['options'] ) && is_array( $field['options'] ) ) {
            foreach ( $field['options'] as $option ) {
                ?>
                <div class="radio-option">
                    <input type="text" class="option-value field-option" placeholder="Option Value" value="<?php echo esc_attr( $option ); ?>">
                    <span class="remove-option">Remove</span>
                </div>
                <?php
            }
        } else {
            // Provide an empty option if none exist
            ?>
            <div class="radio-option">
                <input type="text" class="option-value field-option" placeholder="Option Value">
                <span class="remove-option">Remove</span>
            </div>
            <?php
        }
        ?>
    </div>
    <button type="button" class="add-radio-option">Add Radio Option</button>
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/range.php
================
<div class="nm-form-field" data-type="range">
    <label>Range Slider</label>
    <input type="range" name="range_field[]" min="0" max="100">
    <input type="text" class="field-label" placeholder="Field Label">
    <input type="text" class="field-name" placeholder="Field Name">
    <span class="nm-remove-field">Remove</span>
</div>

================
File: admin/views/field-templates/select.php
================
<div class="nm-form-field" data-type="select">
    <label>Dropdown Menu</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <div class="select-options">
        <?php
        if ( isset( $field['options'] ) && is_array( $field['options'] ) ) {
            foreach ( $field['options'] as $option ) {
                ?>
                <div class="select-option">
                    <input type="text" class="option-value field-option" placeholder="Option Value" value="<?php echo esc_attr( $option ); ?>">
                    <span class="remove-option">Remove</span>
                </div>
                <?php
            }
        } else {
            // Provide an empty option if none exist
            ?>
            <div class="select-option">
                <input type="text" class="option-value field-option" placeholder="Option Value">
                <span class="remove-option">Remove</span>
            </div>
            <?php
        }
        ?>
    </div>
    <button type="button" class="add-select-option">Add Option</button>
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/text.php
================
<div class="nm-form-field" data-type="text">
<label>Text Field</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr($field_label); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr($field_name); ?>">
    <span class="nm-remove-field">Remove</span>
</div>

================
File: admin/views/field-templates/textarea.php
================
<div class="nm-form-field" data-type="textarea">
    <label>Textarea</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/field-templates/title.php
================
<div class="nm-form-field" data-type="title">
    <label>Title</label>
    <input type="text" class="field-label" placeholder="Field Label">
    <input type="text" class="field-name" placeholder="Field Name">
    <span class="nm-remove-field">Remove</span>
</div>

================
File: admin/views/field-templates/url.php
================
<div class="nm-form-field" data-type="url">
    <label>URL Field</label>
    <input type="text" class="field-label" placeholder="Field Label" value="<?php echo esc_attr( $field_label ); ?>">
    <input type="text" class="field-name" placeholder="Field Name" value="<?php echo esc_attr( $field_name ); ?>">
    <span class="nm-remove-field">Remove Field</span>
</div>

================
File: admin/views/form-builder.php
================
<div class="wrap">
    <h1>Form Builder</h1>
    <div id="nm-form-builder">
        <div id="nm-form-elements">
            <h2>Available Fields</h2>
            <hr>
            <ul>
                <li data-type="header">Header</li>
                <li data-type="text">Text Field</li>
                <li data-type="textarea">Textarea</li>
                <li data-type="checkbox">Checkbox</li>
                <li data-type="radio">Radio Group</li>
                <li data-type="select">Dropdown Menu</li>
                <li data-type="file">File Upload</li>
                <li data-type="number">Number Field</li>
                <li data-type="date">Date Picker</li>
                <li data-type="url">URL Field</li>
                <!-- Agrega más tipos de campos si es necesario -->
            </ul>
            <hr>

            <h2>Special Fields</h2>
            <hr>
            <label>
                <input type="checkbox" id="nm-ab-option" name="ab_option" <?php echo get_option('nm_ab_option_enabled', 0) ? 'checked' : ''; ?>>
                Activate A/B Option
            </label>
            <span id="nm-ab-info" title="¡Atención! Si selecciona esta opción, deberá definir dos formularios y el usuario final elegirá entre uno y otro">[i]</span>
            <div id="nm-ab-options" style="display: <?php echo get_option('nm_ab_option_enabled', 0) ? 'block' : 'none'; ?>;">
                <label>Option A Text: <input type="text" id="nm-option-a-text" name="option_a_text" value="<?php echo esc_attr(get_option('nm_option_a_text', 'Opción A')); ?>"></label>
                <label>Option B Text: <input type="text" id="nm-option-b-text" name="option_b_text" value="<?php echo esc_attr(get_option('nm_option_b_text', 'Opción B')); ?>"></label>
                <!-- Add the Save Button Here -->
                <button id="nm-save-option-texts" class="button button-primary">Guardar Nombres de Opciones</button>
            </div>
        </div>

        <?php
        $ab_option_enabled = get_option('nm_ab_option_enabled', 0);
        ?>

        <div id="nm-form-preview">

            <!-- Tabs for A/B Forms -->
            <div id="tabsforms" style="display: <?php echo $ab_option_enabled ? 'block' : 'none'; ?>;">
                <h2 class="nav-tab-wrapper">
                    <a href="#tab-a" class="nav-tab nav-tab-active"><?php echo esc_html(get_option('nm_option_a_text', 'Opción A')); ?></a>
                    <a href="#tab-b" class="nav-tab"><?php echo esc_html(get_option('nm_option_b_text', 'Opción B')); ?></a>
                </h2>

                <!-- Form A -->
                <div id="tab-a" class="tab-content">
                    <h2>Formulario Opción A</h2>

                    <form id="nm-custom-form-a" class="nm-form-droppable">
                        <p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>
                        <hr>

                        <!-- Fixed Fields -->
                        <?php
                        $has_map_field = false;

                        if (isset($form_data_a['fields']) && is_array($form_data_a['fields'])) {
                            foreach ($form_data_a['fields'] as $field) {
                                if ($field['type'] === 'map') {
                                    $has_map_field = true;
                                }
                            }
                        }

                        if (!$has_map_field): ?>
                            <div id="mapabase" class="nm-form-field" data-type="map">
                                <label>Map Drawing</label>
                                <div id="nm-map-canvas"></div>
                            </div>
                        <?php endif; ?>

                        <!-- Dynamic Fields -->
                        <?php
                        if (!empty($form_data_a['fields'])) {
                            foreach ($form_data_a['fields'] as $field) {
                                $field_name = $field['name'] ?? '';
                                $field_label = $field['label'] ?? '';
                                $field_options = $field['options'] ?? [];

                                // Include the field template
                                include 'field-templates/' . $field['type'] . '.php';
                            }
                        } else {
                            echo '<p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>';
                        }
                        ?>
                    </form>
                    <button id="nm-save-form-a" class="button button-primary">Guardar Formulario A</button>
                </div>

                <!-- Form B -->
                <div id="tab-b" class="tab-content" style="display: none;">
                    <h2>Formulario Opción B</h2>

                    <form id="nm-custom-form-b" class="nm-form-droppable">
                        <p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>
                        <hr>

                        <!-- Fixed Fields -->
                        <?php
                        $has_map_field = false;

                        if (isset($form_data_b['fields']) && is_array($form_data_b['fields'])) {
                            foreach ($form_data_b['fields'] as $field) {
                                if ($field['type'] === 'map') {
                                    $has_map_field = true;
                                }
                            }
                        }

                        if (!$has_map_field): ?>
                            <div id="mapabase" class="nm-form-field" data-type="map">
                                <label>Map Drawing</label>
                                <div id="nm-map-canvas"></div>
                            </div>
                        <?php endif; ?>

                        <!-- Dynamic Fields -->
                        <?php
                        if (!empty($form_data_b['fields'])) {
                            foreach ($form_data_b['fields'] as $field) {
                                $field_name = $field['name'] ?? '';
                                $field_label = $field['label'] ?? '';
                                $field_options = $field['options'] ?? [];

                                // Include the field template
                                include 'field-templates/' . $field['type'] . '.php';
                            }
                        } else {
                            echo '<p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>';
                        }
                        ?>
                    </form>
                    <button id="nm-save-form-b" class="button button-primary">Guardar Formulario B</button>
                </div>
            </div>

            <!-- Single Form -->
            <div id="formunique" style="display: <?php echo !$ab_option_enabled ? 'block' : 'none'; ?>;">
                <h2 style="text-align: center;">Tu Formulario</h2>

                <form id="nm-custom-form" class="nm-form-droppable">
                    <p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>
                    <hr>

                    <!-- Fixed Fields -->
                    <?php
                    $has_map_field = false;

                    if (isset($form_data['fields']) && is_array($form_data['fields'])) {
                        foreach ($form_data['fields'] as $field) {
                            if ($field['type'] === 'map') {
                                $has_map_field = true;
                            }
                        }
                    }

                    if (!$has_map_field): ?>
                        <div id="mapabase" class="nm-form-field" data-type="map">
                            <label>Map Drawing</label>
                            <div id="nm-map-canvas"></div>
                        </div>
                    <?php endif; ?>

                    <!-- Dynamic Fields -->
                    <?php
                    if (isset($form_data['fields']) && is_array($form_data['fields'])) {
                        foreach ($form_data['fields'] as $field) {
                            $field_name = $field['name'] ?? '';
                            $field_label = $field['label'] ?? '';
                            $field_options = $field['options'] ?? [];

                            // Include the field template
                            include 'field-templates/' . $field['type'] . '.php';
                        }
                    } else {
                        echo '<p style="text-align: center;">Arrastra elementos bajo esta línea para crear tu formulario</p>';
                    }
                    ?>
                </form>
                <button id="nm-save-form" class="button button-primary">Guardar Formulario</button>
            </div>
        </div>

       

    </div>

</div>
</div>
</div>

<script>
    jQuery(document).ready(function($) {
        function initializeTabs() {
            if ($('#tabs').length) {
                $("#tabs").tabs();
            }
        }
        $('#tabsforms .nav-tab').click(function(e) {
            e.preventDefault();

            // Remover la clase 'nav-tab-active' de todas las pestañas
            $('#tabsforms .nav-tab').removeClass('nav-tab-active');

            // Añadir la clase 'nav-tab-active' a la pestaña actual
            $(this).addClass('nav-tab-active');

            // Ocultar todo el contenido de las pestañas
            $('#tabsforms .tab-content').hide();

            // Mostrar el contenido correspondiente
            var selected_tab = $(this).attr('href');
            $(selected_tab).show();
        });

        // Initialize tabs on page load if A/B option is enabled
        <?php if ($ab_option_enabled): ?>
            initializeTabs();
        <?php endif; ?>

        // Toggle visibility of A/B options when checkbox is changed
        $('#nm-ab-option').change(function() {
            if ($(this).is(':checked')) {
                $('#tabsforms').show();
                // Initialize tabs
                $('#formunique').hide();
                initializeTabs();
            } else {
                $('#tabsforms').hide();
                // Destroy tabs and show only Form A
                $('#formunique').show();
            }


        });
    });
</script>

================
File: admin/views/manage-layers.php
================
<?php
// Asegúrate de no tener espacios en blanco antes de la etiqueta de apertura <?php
?>

<h1><?php esc_html_e('Manage Map Layers', 'nexusmap'); ?></h1>

<!-- Formulario para añadir una nueva capa base -->
<h2><?php esc_html_e('Add New Base Layer', 'nexusmap'); ?></h2>
<form method="post" action="<?php echo esc_url( admin_url('admin-post.php') ); ?>">
    <input type="hidden" name="action" value="nm_add_base_layer_action">
    <?php wp_nonce_field('nm_add_base_layer', 'nm_nonce'); ?>
    <table class="form-table">
        <tr>
            <th scope="row"><label for="layer_name"><?php esc_html_e('Layer Name', 'nexusmap'); ?></label></th>
            <td><input name="layer_name" type="text" id="layer_name" class="regular-text" required></td>
        </tr>
        <tr>
            <th scope="row"><label for="layer_url"><?php esc_html_e('Tile Layer URL', 'nexusmap'); ?></label></th>
            <td><input name="layer_url" type="text" id="layer_url" class="regular-text" required></td>
        </tr>
        <tr>
            <th scope="row"><label for="layer_attribution"><?php esc_html_e('Attribution', 'nexusmap'); ?></label></th>
            <td><textarea name="layer_attribution" id="layer_attribution" class="regular-text" rows="3"></textarea></td>
        </tr>
        <!-- Puedes agregar más campos para opciones adicionales -->
    </table>
    <p class="submit">
        <input type="submit" name="nm_add_base_layer" id="submit" class="button button-primary" value="<?php esc_attr_e('Add Base Layer', 'nexusmap'); ?>">
    </p>
</form>

<?php
$base_layers = get_option('nm_base_layers', array());
if (! empty($base_layers)) : ?>
    <h2><?php esc_html_e('Existing Base Layers', 'nexusmap'); ?></h2>
    <table class="wp-list-table widefat fixed striped">
        <thead>
            <tr>
                <th><?php esc_html_e('Layer Name', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Tile Layer URL', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Attribution', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Actions', 'nexusmap'); ?></th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($base_layers as $index => $layer) : ?>
                <tr>
                    <td><?php echo esc_html($layer['name']); ?></td>
                    <td><?php echo esc_html($layer['url']); ?></td>
                    <td><?php echo esc_html($layer['attribution']); ?></td>
                    <td>
                        <!-- Enlace para eliminar -->
                        <a href="<?php echo esc_url( wp_nonce_url(admin_url('admin-post.php?action=nm_delete_base_layer_action&index=' . $index), 'nm_delete_base_layer_' . $index) ); ?>"><?php esc_html_e('Delete', 'nexusmap'); ?></a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
<?php endif; ?>

<!-- Formulario para añadir una nueva capa overlay -->
<h2><?php esc_html_e('Add New Overlay Layer', 'nexusmap'); ?></h2>
<form method="post" action="<?php echo esc_url( admin_url('admin-post.php') ); ?>">
    <input type="hidden" name="action" value="nm_add_overlay_layer_action">
    <?php wp_nonce_field('nm_add_overlay_layer', 'nm_nonce'); ?>
    <table class="form-table">
        <tr>
            <th scope="row"><label for="overlay_name"><?php esc_html_e('Layer Name', 'nexusmap'); ?></label></th>
            <td><input name="overlay_name" type="text" id="overlay_name" class="regular-text" required></td>
        </tr>
        <tr>
            <th scope="row"><label for="overlay_type"><?php esc_html_e('Layer Type', 'nexusmap'); ?></label></th>
            <td>
                <select name="overlay_type" id="overlay_type" required>
                    <option value="geojson"><?php esc_html_e('GeoJSON', 'nexusmap'); ?></option>
                    <option value="wms"><?php esc_html_e('WMS', 'nexusmap'); ?></option>
                    <!-- Agrega más opciones si lo deseas -->
                </select>
            </td>
        </tr>
        <tr>
            <th scope="row"><label for="overlay_url"><?php esc_html_e('Layer URL', 'nexusmap'); ?></label></th>
            <td><input name="overlay_url" type="text" id="overlay_url" class="regular-text" required></td>
        </tr>
        <tr id="wms_layer_name_row" style="display: none;">
            <th scope="row"><label for="wms_layer_name"><?php esc_html_e('WMS Layer Name', 'nexusmap'); ?></label></th>
            <td><input name="wms_layer_name" type="text" id="wms_layer_name" class="regular-text"></td>
        </tr>
        <!-- Puedes agregar más campos para opciones adicionales -->
    </table>
    <p class="submit">
        <input type="submit" name="nm_add_overlay_layer" id="submit" class="button button-primary" value="<?php esc_attr_e('Add Overlay Layer', 'nexusmap'); ?>">
    </p>
</form>

<script type="text/javascript">
    // Mostrar u ocultar el campo de WMS Layer Name según el tipo seleccionado
    document.getElementById('overlay_type').addEventListener('change', function () {
        var wmsRow = document.getElementById('wms_layer_name_row');
        if (this.value === 'wms') {
            wmsRow.style.display = '';
        } else {
            wmsRow.style.display = 'none';
        }
    });

    // Ejecutar al cargar la página para establecer el estado inicial
    document.addEventListener('DOMContentLoaded', function () {
        var overlayType = document.getElementById('overlay_type').value;
        var wmsRow = document.getElementById('wms_layer_name_row');
        if (overlayType === 'wms') {
            wmsRow.style.display = '';
        } else {
            wmsRow.style.display = 'none';
        }
    });
</script>

<?php
$overlay_layers = get_option('nm_overlay_layers', array());
if (! empty($overlay_layers)) : ?>
    <h2><?php esc_html_e('Existing Overlay Layers', 'nexusmap'); ?></h2>
    <table class="wp-list-table widefat fixed striped">
        <thead>
            <tr>
                <th><?php esc_html_e('Layer Name', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Layer Type', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Layer URL', 'nexusmap'); ?></th>
                <th><?php esc_html_e('WMS Layer Name', 'nexusmap'); ?></th>
                <th><?php esc_html_e('Actions', 'nexusmap'); ?></th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($overlay_layers as $index => $layer) : ?>
                <tr>
                    <td><?php echo esc_html($layer['name']); ?></td>
                    <td><?php echo esc_html(strtoupper($layer['type'])); ?></td>
                    <td><?php echo esc_html($layer['url']); ?></td>
                    <td><?php echo isset($layer['wms_layer_name']) ? esc_html($layer['wms_layer_name']) : ''; ?></td>
                    <td>
                        <!-- Enlace para eliminar -->
                        <a href="<?php echo esc_url( wp_nonce_url(admin_url('admin-post.php?action=nm_delete_overlay_layer_action&index=' . $index), 'nm_delete_overlay_layer_' . $index) ); ?>"><?php esc_html_e('Delete', 'nexusmap'); ?></a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
<?php endif; ?>

================
File: admin/views/map-settings.php
================
<?php
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

// Obtener el valor actual de la opción
$enable_geojson_download = get_option( 'nm_enable_geojson_download', false );
?>

<div class="wrap">
    <h1><?php esc_html_e( 'Map Settings', 'nexusmap' ); ?></h1>

    <form method="post" action="options.php">
        <?php
        settings_fields( 'nm_map_settings_group' );
        do_settings_sections( 'nm_map_settings' );
        submit_button();
        ?>
    </form>
</div>
